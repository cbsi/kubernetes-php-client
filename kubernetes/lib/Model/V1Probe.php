<?php
/**
 * V1Probe
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1Probe Class Doc Comment
 *
 * @category Class
 * @description Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Probe implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Probe';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exec' => '\CBSi\Kubernetes\Model\V1ExecAction',
        'failure_threshold' => 'int',
        'http_get' => '\CBSi\Kubernetes\Model\V1HTTPGetAction',
        'initial_delay_seconds' => 'int',
        'period_seconds' => 'int',
        'success_threshold' => 'int',
        'tcp_socket' => '\CBSi\Kubernetes\Model\V1TCPSocketAction',
        'timeout_seconds' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exec' => null,
        'failure_threshold' => 'int32',
        'http_get' => null,
        'initial_delay_seconds' => 'int32',
        'period_seconds' => 'int32',
        'success_threshold' => 'int32',
        'tcp_socket' => null,
        'timeout_seconds' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exec' => 'exec',
        'failure_threshold' => 'failureThreshold',
        'http_get' => 'httpGet',
        'initial_delay_seconds' => 'initialDelaySeconds',
        'period_seconds' => 'periodSeconds',
        'success_threshold' => 'successThreshold',
        'tcp_socket' => 'tcpSocket',
        'timeout_seconds' => 'timeoutSeconds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exec' => 'setExec',
        'failure_threshold' => 'setFailureThreshold',
        'http_get' => 'setHttpGet',
        'initial_delay_seconds' => 'setInitialDelaySeconds',
        'period_seconds' => 'setPeriodSeconds',
        'success_threshold' => 'setSuccessThreshold',
        'tcp_socket' => 'setTcpSocket',
        'timeout_seconds' => 'setTimeoutSeconds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exec' => 'getExec',
        'failure_threshold' => 'getFailureThreshold',
        'http_get' => 'getHttpGet',
        'initial_delay_seconds' => 'getInitialDelaySeconds',
        'period_seconds' => 'getPeriodSeconds',
        'success_threshold' => 'getSuccessThreshold',
        'tcp_socket' => 'getTcpSocket',
        'timeout_seconds' => 'getTimeoutSeconds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exec'] = isset($data['exec']) ? $data['exec'] : null;
        $this->container['failure_threshold'] = isset($data['failure_threshold']) ? $data['failure_threshold'] : null;
        $this->container['http_get'] = isset($data['http_get']) ? $data['http_get'] : null;
        $this->container['initial_delay_seconds'] = isset($data['initial_delay_seconds']) ? $data['initial_delay_seconds'] : null;
        $this->container['period_seconds'] = isset($data['period_seconds']) ? $data['period_seconds'] : null;
        $this->container['success_threshold'] = isset($data['success_threshold']) ? $data['success_threshold'] : null;
        $this->container['tcp_socket'] = isset($data['tcp_socket']) ? $data['tcp_socket'] : null;
        $this->container['timeout_seconds'] = isset($data['timeout_seconds']) ? $data['timeout_seconds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets exec
     *
     * @return \CBSi\Kubernetes\Model\V1ExecAction
     */
    public function getExec()
    {
        return $this->container['exec'];
    }

    /**
     * Sets exec
     *
     * @param \CBSi\Kubernetes\Model\V1ExecAction $exec One and only one of the following should be specified. Exec specifies the action to take.
     *
     * @return $this
     */
    public function setExec($exec)
    {
        $this->container['exec'] = $exec;

        return $this;
    }

    /**
     * Gets failure_threshold
     *
     * @return int
     */
    public function getFailureThreshold()
    {
        return $this->container['failure_threshold'];
    }

    /**
     * Sets failure_threshold
     *
     * @param int $failure_threshold Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     *
     * @return $this
     */
    public function setFailureThreshold($failure_threshold)
    {
        $this->container['failure_threshold'] = $failure_threshold;

        return $this;
    }

    /**
     * Gets http_get
     *
     * @return \CBSi\Kubernetes\Model\V1HTTPGetAction
     */
    public function getHttpGet()
    {
        return $this->container['http_get'];
    }

    /**
     * Sets http_get
     *
     * @param \CBSi\Kubernetes\Model\V1HTTPGetAction $http_get HTTPGet specifies the http request to perform.
     *
     * @return $this
     */
    public function setHttpGet($http_get)
    {
        $this->container['http_get'] = $http_get;

        return $this;
    }

    /**
     * Gets initial_delay_seconds
     *
     * @return int
     */
    public function getInitialDelaySeconds()
    {
        return $this->container['initial_delay_seconds'];
    }

    /**
     * Sets initial_delay_seconds
     *
     * @param int $initial_delay_seconds Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     *
     * @return $this
     */
    public function setInitialDelaySeconds($initial_delay_seconds)
    {
        $this->container['initial_delay_seconds'] = $initial_delay_seconds;

        return $this;
    }

    /**
     * Gets period_seconds
     *
     * @return int
     */
    public function getPeriodSeconds()
    {
        return $this->container['period_seconds'];
    }

    /**
     * Sets period_seconds
     *
     * @param int $period_seconds How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     *
     * @return $this
     */
    public function setPeriodSeconds($period_seconds)
    {
        $this->container['period_seconds'] = $period_seconds;

        return $this;
    }

    /**
     * Gets success_threshold
     *
     * @return int
     */
    public function getSuccessThreshold()
    {
        return $this->container['success_threshold'];
    }

    /**
     * Sets success_threshold
     *
     * @param int $success_threshold Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
     *
     * @return $this
     */
    public function setSuccessThreshold($success_threshold)
    {
        $this->container['success_threshold'] = $success_threshold;

        return $this;
    }

    /**
     * Gets tcp_socket
     *
     * @return \CBSi\Kubernetes\Model\V1TCPSocketAction
     */
    public function getTcpSocket()
    {
        return $this->container['tcp_socket'];
    }

    /**
     * Sets tcp_socket
     *
     * @param \CBSi\Kubernetes\Model\V1TCPSocketAction $tcp_socket TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     *
     * @return $this
     */
    public function setTcpSocket($tcp_socket)
    {
        $this->container['tcp_socket'] = $tcp_socket;

        return $this;
    }

    /**
     * Gets timeout_seconds
     *
     * @return int
     */
    public function getTimeoutSeconds()
    {
        return $this->container['timeout_seconds'];
    }

    /**
     * Sets timeout_seconds
     *
     * @param int $timeout_seconds Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     *
     * @return $this
     */
    public function setTimeoutSeconds($timeout_seconds)
    {
        $this->container['timeout_seconds'] = $timeout_seconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



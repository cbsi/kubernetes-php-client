<?php
/**
 * V1ServiceSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1ServiceSpec Class Doc Comment
 *
 * @category Class
 * @description ServiceSpec describes the attributes that a user creates on a service.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1ServiceSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.ServiceSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_ip' => 'string',
        'external_i_ps' => 'string[]',
        'external_name' => 'string',
        'external_traffic_policy' => 'string',
        'health_check_node_port' => 'int',
        'load_balancer_ip' => 'string',
        'load_balancer_source_ranges' => 'string[]',
        'ports' => '\CBSi\Kubernetes\Model\V1ServicePort[]',
        'selector' => 'map[string,string]',
        'session_affinity' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_ip' => null,
        'external_i_ps' => null,
        'external_name' => null,
        'external_traffic_policy' => null,
        'health_check_node_port' => 'int32',
        'load_balancer_ip' => null,
        'load_balancer_source_ranges' => null,
        'ports' => null,
        'selector' => null,
        'session_affinity' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_ip' => 'clusterIP',
        'external_i_ps' => 'externalIPs',
        'external_name' => 'externalName',
        'external_traffic_policy' => 'externalTrafficPolicy',
        'health_check_node_port' => 'healthCheckNodePort',
        'load_balancer_ip' => 'loadBalancerIP',
        'load_balancer_source_ranges' => 'loadBalancerSourceRanges',
        'ports' => 'ports',
        'selector' => 'selector',
        'session_affinity' => 'sessionAffinity',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_ip' => 'setClusterIp',
        'external_i_ps' => 'setExternalIPs',
        'external_name' => 'setExternalName',
        'external_traffic_policy' => 'setExternalTrafficPolicy',
        'health_check_node_port' => 'setHealthCheckNodePort',
        'load_balancer_ip' => 'setLoadBalancerIp',
        'load_balancer_source_ranges' => 'setLoadBalancerSourceRanges',
        'ports' => 'setPorts',
        'selector' => 'setSelector',
        'session_affinity' => 'setSessionAffinity',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_ip' => 'getClusterIp',
        'external_i_ps' => 'getExternalIPs',
        'external_name' => 'getExternalName',
        'external_traffic_policy' => 'getExternalTrafficPolicy',
        'health_check_node_port' => 'getHealthCheckNodePort',
        'load_balancer_ip' => 'getLoadBalancerIp',
        'load_balancer_source_ranges' => 'getLoadBalancerSourceRanges',
        'ports' => 'getPorts',
        'selector' => 'getSelector',
        'session_affinity' => 'getSessionAffinity',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_ip'] = isset($data['cluster_ip']) ? $data['cluster_ip'] : null;
        $this->container['external_i_ps'] = isset($data['external_i_ps']) ? $data['external_i_ps'] : null;
        $this->container['external_name'] = isset($data['external_name']) ? $data['external_name'] : null;
        $this->container['external_traffic_policy'] = isset($data['external_traffic_policy']) ? $data['external_traffic_policy'] : null;
        $this->container['health_check_node_port'] = isset($data['health_check_node_port']) ? $data['health_check_node_port'] : null;
        $this->container['load_balancer_ip'] = isset($data['load_balancer_ip']) ? $data['load_balancer_ip'] : null;
        $this->container['load_balancer_source_ranges'] = isset($data['load_balancer_source_ranges']) ? $data['load_balancer_source_ranges'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['selector'] = isset($data['selector']) ? $data['selector'] : null;
        $this->container['session_affinity'] = isset($data['session_affinity']) ? $data['session_affinity'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cluster_ip
     *
     * @return string
     */
    public function getClusterIp()
    {
        return $this->container['cluster_ip'];
    }

    /**
     * Sets cluster_ip
     *
     * @param string $cluster_ip clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     *
     * @return $this
     */
    public function setClusterIp($cluster_ip)
    {
        $this->container['cluster_ip'] = $cluster_ip;

        return $this;
    }

    /**
     * Gets external_i_ps
     *
     * @return string[]
     */
    public function getExternalIPs()
    {
        return $this->container['external_i_ps'];
    }

    /**
     * Sets external_i_ps
     *
     * @param string[] $external_i_ps externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
     *
     * @return $this
     */
    public function setExternalIPs($external_i_ps)
    {
        $this->container['external_i_ps'] = $external_i_ps;

        return $this;
    }

    /**
     * Gets external_name
     *
     * @return string
     */
    public function getExternalName()
    {
        return $this->container['external_name'];
    }

    /**
     * Sets external_name
     *
     * @param string $external_name externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName.
     *
     * @return $this
     */
    public function setExternalName($external_name)
    {
        $this->container['external_name'] = $external_name;

        return $this;
    }

    /**
     * Gets external_traffic_policy
     *
     * @return string
     */
    public function getExternalTrafficPolicy()
    {
        return $this->container['external_traffic_policy'];
    }

    /**
     * Sets external_traffic_policy
     *
     * @param string $external_traffic_policy externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
     *
     * @return $this
     */
    public function setExternalTrafficPolicy($external_traffic_policy)
    {
        $this->container['external_traffic_policy'] = $external_traffic_policy;

        return $this;
    }

    /**
     * Gets health_check_node_port
     *
     * @return int
     */
    public function getHealthCheckNodePort()
    {
        return $this->container['health_check_node_port'];
    }

    /**
     * Sets health_check_node_port
     *
     * @param int $health_check_node_port healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
     *
     * @return $this
     */
    public function setHealthCheckNodePort($health_check_node_port)
    {
        $this->container['health_check_node_port'] = $health_check_node_port;

        return $this;
    }

    /**
     * Gets load_balancer_ip
     *
     * @return string
     */
    public function getLoadBalancerIp()
    {
        return $this->container['load_balancer_ip'];
    }

    /**
     * Sets load_balancer_ip
     *
     * @param string $load_balancer_ip Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
     *
     * @return $this
     */
    public function setLoadBalancerIp($load_balancer_ip)
    {
        $this->container['load_balancer_ip'] = $load_balancer_ip;

        return $this;
    }

    /**
     * Gets load_balancer_source_ranges
     *
     * @return string[]
     */
    public function getLoadBalancerSourceRanges()
    {
        return $this->container['load_balancer_source_ranges'];
    }

    /**
     * Sets load_balancer_source_ranges
     *
     * @param string[] $load_balancer_source_ranges If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
     *
     * @return $this
     */
    public function setLoadBalancerSourceRanges($load_balancer_source_ranges)
    {
        $this->container['load_balancer_source_ranges'] = $load_balancer_source_ranges;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \CBSi\Kubernetes\Model\V1ServicePort[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \CBSi\Kubernetes\Model\V1ServicePort[] $ports The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets selector
     *
     * @return map[string,string]
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     *
     * @param map[string,string] $selector Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
     *
     * @return $this
     */
    public function setSelector($selector)
    {
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets session_affinity
     *
     * @return string
     */
    public function getSessionAffinity()
    {
        return $this->container['session_affinity'];
    }

    /**
     * Sets session_affinity
     *
     * @param string $session_affinity Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     *
     * @return $this
     */
    public function setSessionAffinity($session_affinity)
    {
        $this->container['session_affinity'] = $session_affinity;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



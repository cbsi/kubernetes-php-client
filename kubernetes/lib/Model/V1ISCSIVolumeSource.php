<?php
/**
 * V1ISCSIVolumeSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1ISCSIVolumeSource Class Doc Comment
 *
 * @category Class
 * @description Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1ISCSIVolumeSource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.ISCSIVolumeSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chap_auth_discovery' => 'bool',
        'chap_auth_session' => 'bool',
        'fs_type' => 'string',
        'iqn' => 'string',
        'iscsi_interface' => 'string',
        'lun' => 'int',
        'portals' => 'string[]',
        'read_only' => 'bool',
        'secret_ref' => '\CBSi\Kubernetes\Model\V1LocalObjectReference',
        'target_portal' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chap_auth_discovery' => null,
        'chap_auth_session' => null,
        'fs_type' => null,
        'iqn' => null,
        'iscsi_interface' => null,
        'lun' => 'int32',
        'portals' => null,
        'read_only' => null,
        'secret_ref' => null,
        'target_portal' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chap_auth_discovery' => 'chapAuthDiscovery',
        'chap_auth_session' => 'chapAuthSession',
        'fs_type' => 'fsType',
        'iqn' => 'iqn',
        'iscsi_interface' => 'iscsiInterface',
        'lun' => 'lun',
        'portals' => 'portals',
        'read_only' => 'readOnly',
        'secret_ref' => 'secretRef',
        'target_portal' => 'targetPortal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chap_auth_discovery' => 'setChapAuthDiscovery',
        'chap_auth_session' => 'setChapAuthSession',
        'fs_type' => 'setFsType',
        'iqn' => 'setIqn',
        'iscsi_interface' => 'setIscsiInterface',
        'lun' => 'setLun',
        'portals' => 'setPortals',
        'read_only' => 'setReadOnly',
        'secret_ref' => 'setSecretRef',
        'target_portal' => 'setTargetPortal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chap_auth_discovery' => 'getChapAuthDiscovery',
        'chap_auth_session' => 'getChapAuthSession',
        'fs_type' => 'getFsType',
        'iqn' => 'getIqn',
        'iscsi_interface' => 'getIscsiInterface',
        'lun' => 'getLun',
        'portals' => 'getPortals',
        'read_only' => 'getReadOnly',
        'secret_ref' => 'getSecretRef',
        'target_portal' => 'getTargetPortal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chap_auth_discovery'] = isset($data['chap_auth_discovery']) ? $data['chap_auth_discovery'] : null;
        $this->container['chap_auth_session'] = isset($data['chap_auth_session']) ? $data['chap_auth_session'] : null;
        $this->container['fs_type'] = isset($data['fs_type']) ? $data['fs_type'] : null;
        $this->container['iqn'] = isset($data['iqn']) ? $data['iqn'] : null;
        $this->container['iscsi_interface'] = isset($data['iscsi_interface']) ? $data['iscsi_interface'] : null;
        $this->container['lun'] = isset($data['lun']) ? $data['lun'] : null;
        $this->container['portals'] = isset($data['portals']) ? $data['portals'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['secret_ref'] = isset($data['secret_ref']) ? $data['secret_ref'] : null;
        $this->container['target_portal'] = isset($data['target_portal']) ? $data['target_portal'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iqn'] === null) {
            $invalidProperties[] = "'iqn' can't be null";
        }
        if ($this->container['lun'] === null) {
            $invalidProperties[] = "'lun' can't be null";
        }
        if ($this->container['target_portal'] === null) {
            $invalidProperties[] = "'target_portal' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['iqn'] === null) {
            return false;
        }
        if ($this->container['lun'] === null) {
            return false;
        }
        if ($this->container['target_portal'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets chap_auth_discovery
     *
     * @return bool
     */
    public function getChapAuthDiscovery()
    {
        return $this->container['chap_auth_discovery'];
    }

    /**
     * Sets chap_auth_discovery
     *
     * @param bool $chap_auth_discovery whether support iSCSI Discovery CHAP authentication
     *
     * @return $this
     */
    public function setChapAuthDiscovery($chap_auth_discovery)
    {
        $this->container['chap_auth_discovery'] = $chap_auth_discovery;

        return $this;
    }

    /**
     * Gets chap_auth_session
     *
     * @return bool
     */
    public function getChapAuthSession()
    {
        return $this->container['chap_auth_session'];
    }

    /**
     * Sets chap_auth_session
     *
     * @param bool $chap_auth_session whether support iSCSI Session CHAP authentication
     *
     * @return $this
     */
    public function setChapAuthSession($chap_auth_session)
    {
        $this->container['chap_auth_session'] = $chap_auth_session;

        return $this;
    }

    /**
     * Gets fs_type
     *
     * @return string
     */
    public function getFsType()
    {
        return $this->container['fs_type'];
    }

    /**
     * Sets fs_type
     *
     * @param string $fs_type Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     *
     * @return $this
     */
    public function setFsType($fs_type)
    {
        $this->container['fs_type'] = $fs_type;

        return $this;
    }

    /**
     * Gets iqn
     *
     * @return string
     */
    public function getIqn()
    {
        return $this->container['iqn'];
    }

    /**
     * Sets iqn
     *
     * @param string $iqn Target iSCSI Qualified Name.
     *
     * @return $this
     */
    public function setIqn($iqn)
    {
        $this->container['iqn'] = $iqn;

        return $this;
    }

    /**
     * Gets iscsi_interface
     *
     * @return string
     */
    public function getIscsiInterface()
    {
        return $this->container['iscsi_interface'];
    }

    /**
     * Sets iscsi_interface
     *
     * @param string $iscsi_interface Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
     *
     * @return $this
     */
    public function setIscsiInterface($iscsi_interface)
    {
        $this->container['iscsi_interface'] = $iscsi_interface;

        return $this;
    }

    /**
     * Gets lun
     *
     * @return int
     */
    public function getLun()
    {
        return $this->container['lun'];
    }

    /**
     * Sets lun
     *
     * @param int $lun iSCSI target lun number.
     *
     * @return $this
     */
    public function setLun($lun)
    {
        $this->container['lun'] = $lun;

        return $this;
    }

    /**
     * Gets portals
     *
     * @return string[]
     */
    public function getPortals()
    {
        return $this->container['portals'];
    }

    /**
     * Sets portals
     *
     * @param string[] $portals iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     *
     * @return $this
     */
    public function setPortals($portals)
    {
        $this->container['portals'] = $portals;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets secret_ref
     *
     * @return \CBSi\Kubernetes\Model\V1LocalObjectReference
     */
    public function getSecretRef()
    {
        return $this->container['secret_ref'];
    }

    /**
     * Sets secret_ref
     *
     * @param \CBSi\Kubernetes\Model\V1LocalObjectReference $secret_ref CHAP secret for iSCSI target and initiator authentication
     *
     * @return $this
     */
    public function setSecretRef($secret_ref)
    {
        $this->container['secret_ref'] = $secret_ref;

        return $this;
    }

    /**
     * Gets target_portal
     *
     * @return string
     */
    public function getTargetPortal()
    {
        return $this->container['target_portal'];
    }

    /**
     * Sets target_portal
     *
     * @param string $target_portal iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     *
     * @return $this
     */
    public function setTargetPortal($target_portal)
    {
        $this->container['target_portal'] = $target_portal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



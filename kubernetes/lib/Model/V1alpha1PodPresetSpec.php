<?php
/**
 * V1alpha1PodPresetSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1alpha1PodPresetSpec Class Doc Comment
 *
 * @category Class
 * @description PodPresetSpec is a description of a pod preset.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1alpha1PodPresetSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1alpha1.PodPresetSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'env' => '\CBSi\Kubernetes\Model\V1EnvVar[]',
        'env_from' => '\CBSi\Kubernetes\Model\V1EnvFromSource[]',
        'selector' => '\CBSi\Kubernetes\Model\V1LabelSelector',
        'volume_mounts' => '\CBSi\Kubernetes\Model\V1VolumeMount[]',
        'volumes' => '\CBSi\Kubernetes\Model\V1Volume[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'env' => null,
        'env_from' => null,
        'selector' => null,
        'volume_mounts' => null,
        'volumes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'env' => 'env',
        'env_from' => 'envFrom',
        'selector' => 'selector',
        'volume_mounts' => 'volumeMounts',
        'volumes' => 'volumes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'env' => 'setEnv',
        'env_from' => 'setEnvFrom',
        'selector' => 'setSelector',
        'volume_mounts' => 'setVolumeMounts',
        'volumes' => 'setVolumes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'env' => 'getEnv',
        'env_from' => 'getEnvFrom',
        'selector' => 'getSelector',
        'volume_mounts' => 'getVolumeMounts',
        'volumes' => 'getVolumes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['env'] = isset($data['env']) ? $data['env'] : null;
        $this->container['env_from'] = isset($data['env_from']) ? $data['env_from'] : null;
        $this->container['selector'] = isset($data['selector']) ? $data['selector'] : null;
        $this->container['volume_mounts'] = isset($data['volume_mounts']) ? $data['volume_mounts'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets env
     *
     * @return \CBSi\Kubernetes\Model\V1EnvVar[]
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param \CBSi\Kubernetes\Model\V1EnvVar[] $env Env defines the collection of EnvVar to inject into containers.
     *
     * @return $this
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets env_from
     *
     * @return \CBSi\Kubernetes\Model\V1EnvFromSource[]
     */
    public function getEnvFrom()
    {
        return $this->container['env_from'];
    }

    /**
     * Sets env_from
     *
     * @param \CBSi\Kubernetes\Model\V1EnvFromSource[] $env_from EnvFrom defines the collection of EnvFromSource to inject into containers.
     *
     * @return $this
     */
    public function setEnvFrom($env_from)
    {
        $this->container['env_from'] = $env_from;

        return $this;
    }

    /**
     * Gets selector
     *
     * @return \CBSi\Kubernetes\Model\V1LabelSelector
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     *
     * @param \CBSi\Kubernetes\Model\V1LabelSelector $selector Selector is a label query over a set of resources, in this case pods. Required.
     *
     * @return $this
     */
    public function setSelector($selector)
    {
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets volume_mounts
     *
     * @return \CBSi\Kubernetes\Model\V1VolumeMount[]
     */
    public function getVolumeMounts()
    {
        return $this->container['volume_mounts'];
    }

    /**
     * Sets volume_mounts
     *
     * @param \CBSi\Kubernetes\Model\V1VolumeMount[] $volume_mounts VolumeMounts defines the collection of VolumeMount to inject into containers.
     *
     * @return $this
     */
    public function setVolumeMounts($volume_mounts)
    {
        $this->container['volume_mounts'] = $volume_mounts;

        return $this;
    }

    /**
     * Gets volumes
     *
     * @return \CBSi\Kubernetes\Model\V1Volume[]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     *
     * @param \CBSi\Kubernetes\Model\V1Volume[] $volumes Volumes defines the collection of Volume to inject into the pod.
     *
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



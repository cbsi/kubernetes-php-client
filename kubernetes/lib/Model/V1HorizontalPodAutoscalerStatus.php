<?php
/**
 * V1HorizontalPodAutoscalerStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1HorizontalPodAutoscalerStatus Class Doc Comment
 *
 * @category Class
 * @description current status of a horizontal pod autoscaler
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1HorizontalPodAutoscalerStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.HorizontalPodAutoscalerStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_cpu_utilization_percentage' => 'int',
        'current_replicas' => 'int',
        'desired_replicas' => 'int',
        'last_scale_time' => '\DateTime',
        'observed_generation' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'current_cpu_utilization_percentage' => 'int32',
        'current_replicas' => 'int32',
        'desired_replicas' => 'int32',
        'last_scale_time' => 'date-time',
        'observed_generation' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_cpu_utilization_percentage' => 'currentCPUUtilizationPercentage',
        'current_replicas' => 'currentReplicas',
        'desired_replicas' => 'desiredReplicas',
        'last_scale_time' => 'lastScaleTime',
        'observed_generation' => 'observedGeneration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_cpu_utilization_percentage' => 'setCurrentCpuUtilizationPercentage',
        'current_replicas' => 'setCurrentReplicas',
        'desired_replicas' => 'setDesiredReplicas',
        'last_scale_time' => 'setLastScaleTime',
        'observed_generation' => 'setObservedGeneration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_cpu_utilization_percentage' => 'getCurrentCpuUtilizationPercentage',
        'current_replicas' => 'getCurrentReplicas',
        'desired_replicas' => 'getDesiredReplicas',
        'last_scale_time' => 'getLastScaleTime',
        'observed_generation' => 'getObservedGeneration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_cpu_utilization_percentage'] = isset($data['current_cpu_utilization_percentage']) ? $data['current_cpu_utilization_percentage'] : null;
        $this->container['current_replicas'] = isset($data['current_replicas']) ? $data['current_replicas'] : null;
        $this->container['desired_replicas'] = isset($data['desired_replicas']) ? $data['desired_replicas'] : null;
        $this->container['last_scale_time'] = isset($data['last_scale_time']) ? $data['last_scale_time'] : null;
        $this->container['observed_generation'] = isset($data['observed_generation']) ? $data['observed_generation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['current_replicas'] === null) {
            $invalidProperties[] = "'current_replicas' can't be null";
        }
        if ($this->container['desired_replicas'] === null) {
            $invalidProperties[] = "'desired_replicas' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['current_replicas'] === null) {
            return false;
        }
        if ($this->container['desired_replicas'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets current_cpu_utilization_percentage
     *
     * @return int
     */
    public function getCurrentCpuUtilizationPercentage()
    {
        return $this->container['current_cpu_utilization_percentage'];
    }

    /**
     * Sets current_cpu_utilization_percentage
     *
     * @param int $current_cpu_utilization_percentage current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
     *
     * @return $this
     */
    public function setCurrentCpuUtilizationPercentage($current_cpu_utilization_percentage)
    {
        $this->container['current_cpu_utilization_percentage'] = $current_cpu_utilization_percentage;

        return $this;
    }

    /**
     * Gets current_replicas
     *
     * @return int
     */
    public function getCurrentReplicas()
    {
        return $this->container['current_replicas'];
    }

    /**
     * Sets current_replicas
     *
     * @param int $current_replicas current number of replicas of pods managed by this autoscaler.
     *
     * @return $this
     */
    public function setCurrentReplicas($current_replicas)
    {
        $this->container['current_replicas'] = $current_replicas;

        return $this;
    }

    /**
     * Gets desired_replicas
     *
     * @return int
     */
    public function getDesiredReplicas()
    {
        return $this->container['desired_replicas'];
    }

    /**
     * Sets desired_replicas
     *
     * @param int $desired_replicas desired number of replicas of pods managed by this autoscaler.
     *
     * @return $this
     */
    public function setDesiredReplicas($desired_replicas)
    {
        $this->container['desired_replicas'] = $desired_replicas;

        return $this;
    }

    /**
     * Gets last_scale_time
     *
     * @return \DateTime
     */
    public function getLastScaleTime()
    {
        return $this->container['last_scale_time'];
    }

    /**
     * Sets last_scale_time
     *
     * @param \DateTime $last_scale_time last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
     *
     * @return $this
     */
    public function setLastScaleTime($last_scale_time)
    {
        $this->container['last_scale_time'] = $last_scale_time;

        return $this;
    }

    /**
     * Gets observed_generation
     *
     * @return int
     */
    public function getObservedGeneration()
    {
        return $this->container['observed_generation'];
    }

    /**
     * Sets observed_generation
     *
     * @param int $observed_generation most recent generation observed by this autoscaler.
     *
     * @return $this
     */
    public function setObservedGeneration($observed_generation)
    {
        $this->container['observed_generation'] = $observed_generation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



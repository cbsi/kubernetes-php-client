<?php
/**
 * V1Affinity
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1Affinity Class Doc Comment
 *
 * @category Class
 * @description Affinity is a group of affinity scheduling rules.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Affinity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Affinity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'node_affinity' => '\CBSi\Kubernetes\Model\V1NodeAffinity',
        'pod_affinity' => '\CBSi\Kubernetes\Model\V1PodAffinity',
        'pod_anti_affinity' => '\CBSi\Kubernetes\Model\V1PodAntiAffinity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'node_affinity' => null,
        'pod_affinity' => null,
        'pod_anti_affinity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'node_affinity' => 'nodeAffinity',
        'pod_affinity' => 'podAffinity',
        'pod_anti_affinity' => 'podAntiAffinity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'node_affinity' => 'setNodeAffinity',
        'pod_affinity' => 'setPodAffinity',
        'pod_anti_affinity' => 'setPodAntiAffinity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'node_affinity' => 'getNodeAffinity',
        'pod_affinity' => 'getPodAffinity',
        'pod_anti_affinity' => 'getPodAntiAffinity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['node_affinity'] = isset($data['node_affinity']) ? $data['node_affinity'] : null;
        $this->container['pod_affinity'] = isset($data['pod_affinity']) ? $data['pod_affinity'] : null;
        $this->container['pod_anti_affinity'] = isset($data['pod_anti_affinity']) ? $data['pod_anti_affinity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets node_affinity
     *
     * @return \CBSi\Kubernetes\Model\V1NodeAffinity
     */
    public function getNodeAffinity()
    {
        return $this->container['node_affinity'];
    }

    /**
     * Sets node_affinity
     *
     * @param \CBSi\Kubernetes\Model\V1NodeAffinity $node_affinity Describes node affinity scheduling rules for the pod.
     *
     * @return $this
     */
    public function setNodeAffinity($node_affinity)
    {
        $this->container['node_affinity'] = $node_affinity;

        return $this;
    }

    /**
     * Gets pod_affinity
     *
     * @return \CBSi\Kubernetes\Model\V1PodAffinity
     */
    public function getPodAffinity()
    {
        return $this->container['pod_affinity'];
    }

    /**
     * Sets pod_affinity
     *
     * @param \CBSi\Kubernetes\Model\V1PodAffinity $pod_affinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
     *
     * @return $this
     */
    public function setPodAffinity($pod_affinity)
    {
        $this->container['pod_affinity'] = $pod_affinity;

        return $this;
    }

    /**
     * Gets pod_anti_affinity
     *
     * @return \CBSi\Kubernetes\Model\V1PodAntiAffinity
     */
    public function getPodAntiAffinity()
    {
        return $this->container['pod_anti_affinity'];
    }

    /**
     * Sets pod_anti_affinity
     *
     * @param \CBSi\Kubernetes\Model\V1PodAntiAffinity $pod_anti_affinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
     *
     * @return $this
     */
    public function setPodAntiAffinity($pod_anti_affinity)
    {
        $this->container['pod_anti_affinity'] = $pod_anti_affinity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * V1AzureDiskVolumeSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1AzureDiskVolumeSource Class Doc Comment
 *
 * @category Class
 * @description AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1AzureDiskVolumeSource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.AzureDiskVolumeSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'caching_mode' => 'string',
        'disk_name' => 'string',
        'disk_uri' => 'string',
        'fs_type' => 'string',
        'kind' => 'string',
        'read_only' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'caching_mode' => null,
        'disk_name' => null,
        'disk_uri' => null,
        'fs_type' => null,
        'kind' => null,
        'read_only' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'caching_mode' => 'cachingMode',
        'disk_name' => 'diskName',
        'disk_uri' => 'diskURI',
        'fs_type' => 'fsType',
        'kind' => 'kind',
        'read_only' => 'readOnly'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'caching_mode' => 'setCachingMode',
        'disk_name' => 'setDiskName',
        'disk_uri' => 'setDiskUri',
        'fs_type' => 'setFsType',
        'kind' => 'setKind',
        'read_only' => 'setReadOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'caching_mode' => 'getCachingMode',
        'disk_name' => 'getDiskName',
        'disk_uri' => 'getDiskUri',
        'fs_type' => 'getFsType',
        'kind' => 'getKind',
        'read_only' => 'getReadOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['caching_mode'] = isset($data['caching_mode']) ? $data['caching_mode'] : null;
        $this->container['disk_name'] = isset($data['disk_name']) ? $data['disk_name'] : null;
        $this->container['disk_uri'] = isset($data['disk_uri']) ? $data['disk_uri'] : null;
        $this->container['fs_type'] = isset($data['fs_type']) ? $data['fs_type'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['disk_name'] === null) {
            $invalidProperties[] = "'disk_name' can't be null";
        }
        if ($this->container['disk_uri'] === null) {
            $invalidProperties[] = "'disk_uri' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['disk_name'] === null) {
            return false;
        }
        if ($this->container['disk_uri'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets caching_mode
     *
     * @return string
     */
    public function getCachingMode()
    {
        return $this->container['caching_mode'];
    }

    /**
     * Sets caching_mode
     *
     * @param string $caching_mode Host Caching mode: None, Read Only, Read Write.
     *
     * @return $this
     */
    public function setCachingMode($caching_mode)
    {
        $this->container['caching_mode'] = $caching_mode;

        return $this;
    }

    /**
     * Gets disk_name
     *
     * @return string
     */
    public function getDiskName()
    {
        return $this->container['disk_name'];
    }

    /**
     * Sets disk_name
     *
     * @param string $disk_name The Name of the data disk in the blob storage
     *
     * @return $this
     */
    public function setDiskName($disk_name)
    {
        $this->container['disk_name'] = $disk_name;

        return $this;
    }

    /**
     * Gets disk_uri
     *
     * @return string
     */
    public function getDiskUri()
    {
        return $this->container['disk_uri'];
    }

    /**
     * Sets disk_uri
     *
     * @param string $disk_uri The URI the data disk in the blob storage
     *
     * @return $this
     */
    public function setDiskUri($disk_uri)
    {
        $this->container['disk_uri'] = $disk_uri;

        return $this;
    }

    /**
     * Gets fs_type
     *
     * @return string
     */
    public function getFsType()
    {
        return $this->container['fs_type'];
    }

    /**
     * Sets fs_type
     *
     * @param string $fs_type Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     *
     * @return $this
     */
    public function setFsType($fs_type)
    {
        $this->container['fs_type'] = $fs_type;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



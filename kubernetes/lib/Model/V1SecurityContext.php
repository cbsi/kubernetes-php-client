<?php
/**
 * V1SecurityContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1SecurityContext Class Doc Comment
 *
 * @category Class
 * @description SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1SecurityContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.SecurityContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capabilities' => '\CBSi\Kubernetes\Model\V1Capabilities',
        'privileged' => 'bool',
        'read_only_root_filesystem' => 'bool',
        'run_as_non_root' => 'bool',
        'run_as_user' => 'int',
        'se_linux_options' => '\CBSi\Kubernetes\Model\V1SELinuxOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capabilities' => null,
        'privileged' => null,
        'read_only_root_filesystem' => null,
        'run_as_non_root' => null,
        'run_as_user' => 'int64',
        'se_linux_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capabilities' => 'capabilities',
        'privileged' => 'privileged',
        'read_only_root_filesystem' => 'readOnlyRootFilesystem',
        'run_as_non_root' => 'runAsNonRoot',
        'run_as_user' => 'runAsUser',
        'se_linux_options' => 'seLinuxOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capabilities' => 'setCapabilities',
        'privileged' => 'setPrivileged',
        'read_only_root_filesystem' => 'setReadOnlyRootFilesystem',
        'run_as_non_root' => 'setRunAsNonRoot',
        'run_as_user' => 'setRunAsUser',
        'se_linux_options' => 'setSeLinuxOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capabilities' => 'getCapabilities',
        'privileged' => 'getPrivileged',
        'read_only_root_filesystem' => 'getReadOnlyRootFilesystem',
        'run_as_non_root' => 'getRunAsNonRoot',
        'run_as_user' => 'getRunAsUser',
        'se_linux_options' => 'getSeLinuxOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
        $this->container['privileged'] = isset($data['privileged']) ? $data['privileged'] : null;
        $this->container['read_only_root_filesystem'] = isset($data['read_only_root_filesystem']) ? $data['read_only_root_filesystem'] : null;
        $this->container['run_as_non_root'] = isset($data['run_as_non_root']) ? $data['run_as_non_root'] : null;
        $this->container['run_as_user'] = isset($data['run_as_user']) ? $data['run_as_user'] : null;
        $this->container['se_linux_options'] = isset($data['se_linux_options']) ? $data['se_linux_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets capabilities
     *
     * @return \CBSi\Kubernetes\Model\V1Capabilities
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param \CBSi\Kubernetes\Model\V1Capabilities $capabilities The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     *
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets privileged
     *
     * @return bool
     */
    public function getPrivileged()
    {
        return $this->container['privileged'];
    }

    /**
     * Sets privileged
     *
     * @param bool $privileged Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     *
     * @return $this
     */
    public function setPrivileged($privileged)
    {
        $this->container['privileged'] = $privileged;

        return $this;
    }

    /**
     * Gets read_only_root_filesystem
     *
     * @return bool
     */
    public function getReadOnlyRootFilesystem()
    {
        return $this->container['read_only_root_filesystem'];
    }

    /**
     * Sets read_only_root_filesystem
     *
     * @param bool $read_only_root_filesystem Whether this container has a read-only root filesystem. Default is false.
     *
     * @return $this
     */
    public function setReadOnlyRootFilesystem($read_only_root_filesystem)
    {
        $this->container['read_only_root_filesystem'] = $read_only_root_filesystem;

        return $this;
    }

    /**
     * Gets run_as_non_root
     *
     * @return bool
     */
    public function getRunAsNonRoot()
    {
        return $this->container['run_as_non_root'];
    }

    /**
     * Sets run_as_non_root
     *
     * @param bool $run_as_non_root Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     *
     * @return $this
     */
    public function setRunAsNonRoot($run_as_non_root)
    {
        $this->container['run_as_non_root'] = $run_as_non_root;

        return $this;
    }

    /**
     * Gets run_as_user
     *
     * @return int
     */
    public function getRunAsUser()
    {
        return $this->container['run_as_user'];
    }

    /**
     * Sets run_as_user
     *
     * @param int $run_as_user The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     *
     * @return $this
     */
    public function setRunAsUser($run_as_user)
    {
        $this->container['run_as_user'] = $run_as_user;

        return $this;
    }

    /**
     * Gets se_linux_options
     *
     * @return \CBSi\Kubernetes\Model\V1SELinuxOptions
     */
    public function getSeLinuxOptions()
    {
        return $this->container['se_linux_options'];
    }

    /**
     * Sets se_linux_options
     *
     * @param \CBSi\Kubernetes\Model\V1SELinuxOptions $se_linux_options The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     *
     * @return $this
     */
    public function setSeLinuxOptions($se_linux_options)
    {
        $this->container['se_linux_options'] = $se_linux_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



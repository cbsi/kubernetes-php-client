<?php
/**
 * V1Volume
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1Volume Class Doc Comment
 *
 * @category Class
 * @description Volume represents a named volume in a pod that may be accessed by any container in the pod.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Volume implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Volume';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aws_elastic_block_store' => '\CBSi\Kubernetes\Model\V1AWSElasticBlockStoreVolumeSource',
        'azure_disk' => '\CBSi\Kubernetes\Model\V1AzureDiskVolumeSource',
        'azure_file' => '\CBSi\Kubernetes\Model\V1AzureFileVolumeSource',
        'cephfs' => '\CBSi\Kubernetes\Model\V1CephFSVolumeSource',
        'cinder' => '\CBSi\Kubernetes\Model\V1CinderVolumeSource',
        'config_map' => '\CBSi\Kubernetes\Model\V1ConfigMapVolumeSource',
        'downward_api' => '\CBSi\Kubernetes\Model\V1DownwardAPIVolumeSource',
        'empty_dir' => '\CBSi\Kubernetes\Model\V1EmptyDirVolumeSource',
        'fc' => '\CBSi\Kubernetes\Model\V1FCVolumeSource',
        'flex_volume' => '\CBSi\Kubernetes\Model\V1FlexVolumeSource',
        'flocker' => '\CBSi\Kubernetes\Model\V1FlockerVolumeSource',
        'gce_persistent_disk' => '\CBSi\Kubernetes\Model\V1GCEPersistentDiskVolumeSource',
        'git_repo' => '\CBSi\Kubernetes\Model\V1GitRepoVolumeSource',
        'glusterfs' => '\CBSi\Kubernetes\Model\V1GlusterfsVolumeSource',
        'host_path' => '\CBSi\Kubernetes\Model\V1HostPathVolumeSource',
        'iscsi' => '\CBSi\Kubernetes\Model\V1ISCSIVolumeSource',
        'name' => 'string',
        'nfs' => '\CBSi\Kubernetes\Model\V1NFSVolumeSource',
        'persistent_volume_claim' => '\CBSi\Kubernetes\Model\V1PersistentVolumeClaimVolumeSource',
        'photon_persistent_disk' => '\CBSi\Kubernetes\Model\V1PhotonPersistentDiskVolumeSource',
        'portworx_volume' => '\CBSi\Kubernetes\Model\V1PortworxVolumeSource',
        'projected' => '\CBSi\Kubernetes\Model\V1ProjectedVolumeSource',
        'quobyte' => '\CBSi\Kubernetes\Model\V1QuobyteVolumeSource',
        'rbd' => '\CBSi\Kubernetes\Model\V1RBDVolumeSource',
        'scale_io' => '\CBSi\Kubernetes\Model\V1ScaleIOVolumeSource',
        'secret' => '\CBSi\Kubernetes\Model\V1SecretVolumeSource',
        'storageos' => '\CBSi\Kubernetes\Model\V1StorageOSVolumeSource',
        'vsphere_volume' => '\CBSi\Kubernetes\Model\V1VsphereVirtualDiskVolumeSource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aws_elastic_block_store' => null,
        'azure_disk' => null,
        'azure_file' => null,
        'cephfs' => null,
        'cinder' => null,
        'config_map' => null,
        'downward_api' => null,
        'empty_dir' => null,
        'fc' => null,
        'flex_volume' => null,
        'flocker' => null,
        'gce_persistent_disk' => null,
        'git_repo' => null,
        'glusterfs' => null,
        'host_path' => null,
        'iscsi' => null,
        'name' => null,
        'nfs' => null,
        'persistent_volume_claim' => null,
        'photon_persistent_disk' => null,
        'portworx_volume' => null,
        'projected' => null,
        'quobyte' => null,
        'rbd' => null,
        'scale_io' => null,
        'secret' => null,
        'storageos' => null,
        'vsphere_volume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aws_elastic_block_store' => 'awsElasticBlockStore',
        'azure_disk' => 'azureDisk',
        'azure_file' => 'azureFile',
        'cephfs' => 'cephfs',
        'cinder' => 'cinder',
        'config_map' => 'configMap',
        'downward_api' => 'downwardAPI',
        'empty_dir' => 'emptyDir',
        'fc' => 'fc',
        'flex_volume' => 'flexVolume',
        'flocker' => 'flocker',
        'gce_persistent_disk' => 'gcePersistentDisk',
        'git_repo' => 'gitRepo',
        'glusterfs' => 'glusterfs',
        'host_path' => 'hostPath',
        'iscsi' => 'iscsi',
        'name' => 'name',
        'nfs' => 'nfs',
        'persistent_volume_claim' => 'persistentVolumeClaim',
        'photon_persistent_disk' => 'photonPersistentDisk',
        'portworx_volume' => 'portworxVolume',
        'projected' => 'projected',
        'quobyte' => 'quobyte',
        'rbd' => 'rbd',
        'scale_io' => 'scaleIO',
        'secret' => 'secret',
        'storageos' => 'storageos',
        'vsphere_volume' => 'vsphereVolume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aws_elastic_block_store' => 'setAwsElasticBlockStore',
        'azure_disk' => 'setAzureDisk',
        'azure_file' => 'setAzureFile',
        'cephfs' => 'setCephfs',
        'cinder' => 'setCinder',
        'config_map' => 'setConfigMap',
        'downward_api' => 'setDownwardApi',
        'empty_dir' => 'setEmptyDir',
        'fc' => 'setFc',
        'flex_volume' => 'setFlexVolume',
        'flocker' => 'setFlocker',
        'gce_persistent_disk' => 'setGcePersistentDisk',
        'git_repo' => 'setGitRepo',
        'glusterfs' => 'setGlusterfs',
        'host_path' => 'setHostPath',
        'iscsi' => 'setIscsi',
        'name' => 'setName',
        'nfs' => 'setNfs',
        'persistent_volume_claim' => 'setPersistentVolumeClaim',
        'photon_persistent_disk' => 'setPhotonPersistentDisk',
        'portworx_volume' => 'setPortworxVolume',
        'projected' => 'setProjected',
        'quobyte' => 'setQuobyte',
        'rbd' => 'setRbd',
        'scale_io' => 'setScaleIo',
        'secret' => 'setSecret',
        'storageos' => 'setStorageos',
        'vsphere_volume' => 'setVsphereVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aws_elastic_block_store' => 'getAwsElasticBlockStore',
        'azure_disk' => 'getAzureDisk',
        'azure_file' => 'getAzureFile',
        'cephfs' => 'getCephfs',
        'cinder' => 'getCinder',
        'config_map' => 'getConfigMap',
        'downward_api' => 'getDownwardApi',
        'empty_dir' => 'getEmptyDir',
        'fc' => 'getFc',
        'flex_volume' => 'getFlexVolume',
        'flocker' => 'getFlocker',
        'gce_persistent_disk' => 'getGcePersistentDisk',
        'git_repo' => 'getGitRepo',
        'glusterfs' => 'getGlusterfs',
        'host_path' => 'getHostPath',
        'iscsi' => 'getIscsi',
        'name' => 'getName',
        'nfs' => 'getNfs',
        'persistent_volume_claim' => 'getPersistentVolumeClaim',
        'photon_persistent_disk' => 'getPhotonPersistentDisk',
        'portworx_volume' => 'getPortworxVolume',
        'projected' => 'getProjected',
        'quobyte' => 'getQuobyte',
        'rbd' => 'getRbd',
        'scale_io' => 'getScaleIo',
        'secret' => 'getSecret',
        'storageos' => 'getStorageos',
        'vsphere_volume' => 'getVsphereVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aws_elastic_block_store'] = isset($data['aws_elastic_block_store']) ? $data['aws_elastic_block_store'] : null;
        $this->container['azure_disk'] = isset($data['azure_disk']) ? $data['azure_disk'] : null;
        $this->container['azure_file'] = isset($data['azure_file']) ? $data['azure_file'] : null;
        $this->container['cephfs'] = isset($data['cephfs']) ? $data['cephfs'] : null;
        $this->container['cinder'] = isset($data['cinder']) ? $data['cinder'] : null;
        $this->container['config_map'] = isset($data['config_map']) ? $data['config_map'] : null;
        $this->container['downward_api'] = isset($data['downward_api']) ? $data['downward_api'] : null;
        $this->container['empty_dir'] = isset($data['empty_dir']) ? $data['empty_dir'] : null;
        $this->container['fc'] = isset($data['fc']) ? $data['fc'] : null;
        $this->container['flex_volume'] = isset($data['flex_volume']) ? $data['flex_volume'] : null;
        $this->container['flocker'] = isset($data['flocker']) ? $data['flocker'] : null;
        $this->container['gce_persistent_disk'] = isset($data['gce_persistent_disk']) ? $data['gce_persistent_disk'] : null;
        $this->container['git_repo'] = isset($data['git_repo']) ? $data['git_repo'] : null;
        $this->container['glusterfs'] = isset($data['glusterfs']) ? $data['glusterfs'] : null;
        $this->container['host_path'] = isset($data['host_path']) ? $data['host_path'] : null;
        $this->container['iscsi'] = isset($data['iscsi']) ? $data['iscsi'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['nfs'] = isset($data['nfs']) ? $data['nfs'] : null;
        $this->container['persistent_volume_claim'] = isset($data['persistent_volume_claim']) ? $data['persistent_volume_claim'] : null;
        $this->container['photon_persistent_disk'] = isset($data['photon_persistent_disk']) ? $data['photon_persistent_disk'] : null;
        $this->container['portworx_volume'] = isset($data['portworx_volume']) ? $data['portworx_volume'] : null;
        $this->container['projected'] = isset($data['projected']) ? $data['projected'] : null;
        $this->container['quobyte'] = isset($data['quobyte']) ? $data['quobyte'] : null;
        $this->container['rbd'] = isset($data['rbd']) ? $data['rbd'] : null;
        $this->container['scale_io'] = isset($data['scale_io']) ? $data['scale_io'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['storageos'] = isset($data['storageos']) ? $data['storageos'] : null;
        $this->container['vsphere_volume'] = isset($data['vsphere_volume']) ? $data['vsphere_volume'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets aws_elastic_block_store
     *
     * @return \CBSi\Kubernetes\Model\V1AWSElasticBlockStoreVolumeSource
     */
    public function getAwsElasticBlockStore()
    {
        return $this->container['aws_elastic_block_store'];
    }

    /**
     * Sets aws_elastic_block_store
     *
     * @param \CBSi\Kubernetes\Model\V1AWSElasticBlockStoreVolumeSource $aws_elastic_block_store AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     *
     * @return $this
     */
    public function setAwsElasticBlockStore($aws_elastic_block_store)
    {
        $this->container['aws_elastic_block_store'] = $aws_elastic_block_store;

        return $this;
    }

    /**
     * Gets azure_disk
     *
     * @return \CBSi\Kubernetes\Model\V1AzureDiskVolumeSource
     */
    public function getAzureDisk()
    {
        return $this->container['azure_disk'];
    }

    /**
     * Sets azure_disk
     *
     * @param \CBSi\Kubernetes\Model\V1AzureDiskVolumeSource $azure_disk AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     *
     * @return $this
     */
    public function setAzureDisk($azure_disk)
    {
        $this->container['azure_disk'] = $azure_disk;

        return $this;
    }

    /**
     * Gets azure_file
     *
     * @return \CBSi\Kubernetes\Model\V1AzureFileVolumeSource
     */
    public function getAzureFile()
    {
        return $this->container['azure_file'];
    }

    /**
     * Sets azure_file
     *
     * @param \CBSi\Kubernetes\Model\V1AzureFileVolumeSource $azure_file AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     *
     * @return $this
     */
    public function setAzureFile($azure_file)
    {
        $this->container['azure_file'] = $azure_file;

        return $this;
    }

    /**
     * Gets cephfs
     *
     * @return \CBSi\Kubernetes\Model\V1CephFSVolumeSource
     */
    public function getCephfs()
    {
        return $this->container['cephfs'];
    }

    /**
     * Sets cephfs
     *
     * @param \CBSi\Kubernetes\Model\V1CephFSVolumeSource $cephfs CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     *
     * @return $this
     */
    public function setCephfs($cephfs)
    {
        $this->container['cephfs'] = $cephfs;

        return $this;
    }

    /**
     * Gets cinder
     *
     * @return \CBSi\Kubernetes\Model\V1CinderVolumeSource
     */
    public function getCinder()
    {
        return $this->container['cinder'];
    }

    /**
     * Sets cinder
     *
     * @param \CBSi\Kubernetes\Model\V1CinderVolumeSource $cinder Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     *
     * @return $this
     */
    public function setCinder($cinder)
    {
        $this->container['cinder'] = $cinder;

        return $this;
    }

    /**
     * Gets config_map
     *
     * @return \CBSi\Kubernetes\Model\V1ConfigMapVolumeSource
     */
    public function getConfigMap()
    {
        return $this->container['config_map'];
    }

    /**
     * Sets config_map
     *
     * @param \CBSi\Kubernetes\Model\V1ConfigMapVolumeSource $config_map ConfigMap represents a configMap that should populate this volume
     *
     * @return $this
     */
    public function setConfigMap($config_map)
    {
        $this->container['config_map'] = $config_map;

        return $this;
    }

    /**
     * Gets downward_api
     *
     * @return \CBSi\Kubernetes\Model\V1DownwardAPIVolumeSource
     */
    public function getDownwardApi()
    {
        return $this->container['downward_api'];
    }

    /**
     * Sets downward_api
     *
     * @param \CBSi\Kubernetes\Model\V1DownwardAPIVolumeSource $downward_api DownwardAPI represents downward API about the pod that should populate this volume
     *
     * @return $this
     */
    public function setDownwardApi($downward_api)
    {
        $this->container['downward_api'] = $downward_api;

        return $this;
    }

    /**
     * Gets empty_dir
     *
     * @return \CBSi\Kubernetes\Model\V1EmptyDirVolumeSource
     */
    public function getEmptyDir()
    {
        return $this->container['empty_dir'];
    }

    /**
     * Sets empty_dir
     *
     * @param \CBSi\Kubernetes\Model\V1EmptyDirVolumeSource $empty_dir EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     *
     * @return $this
     */
    public function setEmptyDir($empty_dir)
    {
        $this->container['empty_dir'] = $empty_dir;

        return $this;
    }

    /**
     * Gets fc
     *
     * @return \CBSi\Kubernetes\Model\V1FCVolumeSource
     */
    public function getFc()
    {
        return $this->container['fc'];
    }

    /**
     * Sets fc
     *
     * @param \CBSi\Kubernetes\Model\V1FCVolumeSource $fc FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     *
     * @return $this
     */
    public function setFc($fc)
    {
        $this->container['fc'] = $fc;

        return $this;
    }

    /**
     * Gets flex_volume
     *
     * @return \CBSi\Kubernetes\Model\V1FlexVolumeSource
     */
    public function getFlexVolume()
    {
        return $this->container['flex_volume'];
    }

    /**
     * Sets flex_volume
     *
     * @param \CBSi\Kubernetes\Model\V1FlexVolumeSource $flex_volume FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     *
     * @return $this
     */
    public function setFlexVolume($flex_volume)
    {
        $this->container['flex_volume'] = $flex_volume;

        return $this;
    }

    /**
     * Gets flocker
     *
     * @return \CBSi\Kubernetes\Model\V1FlockerVolumeSource
     */
    public function getFlocker()
    {
        return $this->container['flocker'];
    }

    /**
     * Sets flocker
     *
     * @param \CBSi\Kubernetes\Model\V1FlockerVolumeSource $flocker Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
     *
     * @return $this
     */
    public function setFlocker($flocker)
    {
        $this->container['flocker'] = $flocker;

        return $this;
    }

    /**
     * Gets gce_persistent_disk
     *
     * @return \CBSi\Kubernetes\Model\V1GCEPersistentDiskVolumeSource
     */
    public function getGcePersistentDisk()
    {
        return $this->container['gce_persistent_disk'];
    }

    /**
     * Sets gce_persistent_disk
     *
     * @param \CBSi\Kubernetes\Model\V1GCEPersistentDiskVolumeSource $gce_persistent_disk GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     *
     * @return $this
     */
    public function setGcePersistentDisk($gce_persistent_disk)
    {
        $this->container['gce_persistent_disk'] = $gce_persistent_disk;

        return $this;
    }

    /**
     * Gets git_repo
     *
     * @return \CBSi\Kubernetes\Model\V1GitRepoVolumeSource
     */
    public function getGitRepo()
    {
        return $this->container['git_repo'];
    }

    /**
     * Sets git_repo
     *
     * @param \CBSi\Kubernetes\Model\V1GitRepoVolumeSource $git_repo GitRepo represents a git repository at a particular revision.
     *
     * @return $this
     */
    public function setGitRepo($git_repo)
    {
        $this->container['git_repo'] = $git_repo;

        return $this;
    }

    /**
     * Gets glusterfs
     *
     * @return \CBSi\Kubernetes\Model\V1GlusterfsVolumeSource
     */
    public function getGlusterfs()
    {
        return $this->container['glusterfs'];
    }

    /**
     * Sets glusterfs
     *
     * @param \CBSi\Kubernetes\Model\V1GlusterfsVolumeSource $glusterfs Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
     *
     * @return $this
     */
    public function setGlusterfs($glusterfs)
    {
        $this->container['glusterfs'] = $glusterfs;

        return $this;
    }

    /**
     * Gets host_path
     *
     * @return \CBSi\Kubernetes\Model\V1HostPathVolumeSource
     */
    public function getHostPath()
    {
        return $this->container['host_path'];
    }

    /**
     * Sets host_path
     *
     * @param \CBSi\Kubernetes\Model\V1HostPathVolumeSource $host_path HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     *
     * @return $this
     */
    public function setHostPath($host_path)
    {
        $this->container['host_path'] = $host_path;

        return $this;
    }

    /**
     * Gets iscsi
     *
     * @return \CBSi\Kubernetes\Model\V1ISCSIVolumeSource
     */
    public function getIscsi()
    {
        return $this->container['iscsi'];
    }

    /**
     * Sets iscsi
     *
     * @param \CBSi\Kubernetes\Model\V1ISCSIVolumeSource $iscsi ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
     *
     * @return $this
     */
    public function setIscsi($iscsi)
    {
        $this->container['iscsi'] = $iscsi;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nfs
     *
     * @return \CBSi\Kubernetes\Model\V1NFSVolumeSource
     */
    public function getNfs()
    {
        return $this->container['nfs'];
    }

    /**
     * Sets nfs
     *
     * @param \CBSi\Kubernetes\Model\V1NFSVolumeSource $nfs NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     *
     * @return $this
     */
    public function setNfs($nfs)
    {
        $this->container['nfs'] = $nfs;

        return $this;
    }

    /**
     * Gets persistent_volume_claim
     *
     * @return \CBSi\Kubernetes\Model\V1PersistentVolumeClaimVolumeSource
     */
    public function getPersistentVolumeClaim()
    {
        return $this->container['persistent_volume_claim'];
    }

    /**
     * Sets persistent_volume_claim
     *
     * @param \CBSi\Kubernetes\Model\V1PersistentVolumeClaimVolumeSource $persistent_volume_claim PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     *
     * @return $this
     */
    public function setPersistentVolumeClaim($persistent_volume_claim)
    {
        $this->container['persistent_volume_claim'] = $persistent_volume_claim;

        return $this;
    }

    /**
     * Gets photon_persistent_disk
     *
     * @return \CBSi\Kubernetes\Model\V1PhotonPersistentDiskVolumeSource
     */
    public function getPhotonPersistentDisk()
    {
        return $this->container['photon_persistent_disk'];
    }

    /**
     * Sets photon_persistent_disk
     *
     * @param \CBSi\Kubernetes\Model\V1PhotonPersistentDiskVolumeSource $photon_persistent_disk PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     *
     * @return $this
     */
    public function setPhotonPersistentDisk($photon_persistent_disk)
    {
        $this->container['photon_persistent_disk'] = $photon_persistent_disk;

        return $this;
    }

    /**
     * Gets portworx_volume
     *
     * @return \CBSi\Kubernetes\Model\V1PortworxVolumeSource
     */
    public function getPortworxVolume()
    {
        return $this->container['portworx_volume'];
    }

    /**
     * Sets portworx_volume
     *
     * @param \CBSi\Kubernetes\Model\V1PortworxVolumeSource $portworx_volume PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
     *
     * @return $this
     */
    public function setPortworxVolume($portworx_volume)
    {
        $this->container['portworx_volume'] = $portworx_volume;

        return $this;
    }

    /**
     * Gets projected
     *
     * @return \CBSi\Kubernetes\Model\V1ProjectedVolumeSource
     */
    public function getProjected()
    {
        return $this->container['projected'];
    }

    /**
     * Sets projected
     *
     * @param \CBSi\Kubernetes\Model\V1ProjectedVolumeSource $projected Items for all in one resources secrets, configmaps, and downward API
     *
     * @return $this
     */
    public function setProjected($projected)
    {
        $this->container['projected'] = $projected;

        return $this;
    }

    /**
     * Gets quobyte
     *
     * @return \CBSi\Kubernetes\Model\V1QuobyteVolumeSource
     */
    public function getQuobyte()
    {
        return $this->container['quobyte'];
    }

    /**
     * Sets quobyte
     *
     * @param \CBSi\Kubernetes\Model\V1QuobyteVolumeSource $quobyte Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     *
     * @return $this
     */
    public function setQuobyte($quobyte)
    {
        $this->container['quobyte'] = $quobyte;

        return $this;
    }

    /**
     * Gets rbd
     *
     * @return \CBSi\Kubernetes\Model\V1RBDVolumeSource
     */
    public function getRbd()
    {
        return $this->container['rbd'];
    }

    /**
     * Sets rbd
     *
     * @param \CBSi\Kubernetes\Model\V1RBDVolumeSource $rbd RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
     *
     * @return $this
     */
    public function setRbd($rbd)
    {
        $this->container['rbd'] = $rbd;

        return $this;
    }

    /**
     * Gets scale_io
     *
     * @return \CBSi\Kubernetes\Model\V1ScaleIOVolumeSource
     */
    public function getScaleIo()
    {
        return $this->container['scale_io'];
    }

    /**
     * Sets scale_io
     *
     * @param \CBSi\Kubernetes\Model\V1ScaleIOVolumeSource $scale_io ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     *
     * @return $this
     */
    public function setScaleIo($scale_io)
    {
        $this->container['scale_io'] = $scale_io;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return \CBSi\Kubernetes\Model\V1SecretVolumeSource
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param \CBSi\Kubernetes\Model\V1SecretVolumeSource $secret Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets storageos
     *
     * @return \CBSi\Kubernetes\Model\V1StorageOSVolumeSource
     */
    public function getStorageos()
    {
        return $this->container['storageos'];
    }

    /**
     * Sets storageos
     *
     * @param \CBSi\Kubernetes\Model\V1StorageOSVolumeSource $storageos StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
     *
     * @return $this
     */
    public function setStorageos($storageos)
    {
        $this->container['storageos'] = $storageos;

        return $this;
    }

    /**
     * Gets vsphere_volume
     *
     * @return \CBSi\Kubernetes\Model\V1VsphereVirtualDiskVolumeSource
     */
    public function getVsphereVolume()
    {
        return $this->container['vsphere_volume'];
    }

    /**
     * Sets vsphere_volume
     *
     * @param \CBSi\Kubernetes\Model\V1VsphereVirtualDiskVolumeSource $vsphere_volume VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     *
     * @return $this
     */
    public function setVsphereVolume($vsphere_volume)
    {
        $this->container['vsphere_volume'] = $vsphere_volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



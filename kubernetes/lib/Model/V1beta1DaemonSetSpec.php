<?php
/**
 * V1beta1DaemonSetSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1beta1DaemonSetSpec Class Doc Comment
 *
 * @category Class
 * @description DaemonSetSpec is the specification of a daemon set.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1beta1DaemonSetSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1beta1.DaemonSetSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'min_ready_seconds' => 'int',
        'revision_history_limit' => 'int',
        'selector' => '\CBSi\Kubernetes\Model\V1LabelSelector',
        'template' => '\CBSi\Kubernetes\Model\V1PodTemplateSpec',
        'template_generation' => 'int',
        'update_strategy' => '\CBSi\Kubernetes\Model\V1beta1DaemonSetUpdateStrategy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'min_ready_seconds' => 'int32',
        'revision_history_limit' => 'int32',
        'selector' => null,
        'template' => null,
        'template_generation' => 'int64',
        'update_strategy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_ready_seconds' => 'minReadySeconds',
        'revision_history_limit' => 'revisionHistoryLimit',
        'selector' => 'selector',
        'template' => 'template',
        'template_generation' => 'templateGeneration',
        'update_strategy' => 'updateStrategy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_ready_seconds' => 'setMinReadySeconds',
        'revision_history_limit' => 'setRevisionHistoryLimit',
        'selector' => 'setSelector',
        'template' => 'setTemplate',
        'template_generation' => 'setTemplateGeneration',
        'update_strategy' => 'setUpdateStrategy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_ready_seconds' => 'getMinReadySeconds',
        'revision_history_limit' => 'getRevisionHistoryLimit',
        'selector' => 'getSelector',
        'template' => 'getTemplate',
        'template_generation' => 'getTemplateGeneration',
        'update_strategy' => 'getUpdateStrategy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_ready_seconds'] = isset($data['min_ready_seconds']) ? $data['min_ready_seconds'] : null;
        $this->container['revision_history_limit'] = isset($data['revision_history_limit']) ? $data['revision_history_limit'] : null;
        $this->container['selector'] = isset($data['selector']) ? $data['selector'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['template_generation'] = isset($data['template_generation']) ? $data['template_generation'] : null;
        $this->container['update_strategy'] = isset($data['update_strategy']) ? $data['update_strategy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['template'] === null) {
            $invalidProperties[] = "'template' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['template'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets min_ready_seconds
     *
     * @return int
     */
    public function getMinReadySeconds()
    {
        return $this->container['min_ready_seconds'];
    }

    /**
     * Sets min_ready_seconds
     *
     * @param int $min_ready_seconds The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
     *
     * @return $this
     */
    public function setMinReadySeconds($min_ready_seconds)
    {
        $this->container['min_ready_seconds'] = $min_ready_seconds;

        return $this;
    }

    /**
     * Gets revision_history_limit
     *
     * @return int
     */
    public function getRevisionHistoryLimit()
    {
        return $this->container['revision_history_limit'];
    }

    /**
     * Sets revision_history_limit
     *
     * @param int $revision_history_limit The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
     *
     * @return $this
     */
    public function setRevisionHistoryLimit($revision_history_limit)
    {
        $this->container['revision_history_limit'] = $revision_history_limit;

        return $this;
    }

    /**
     * Gets selector
     *
     * @return \CBSi\Kubernetes\Model\V1LabelSelector
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     *
     * @param \CBSi\Kubernetes\Model\V1LabelSelector $selector A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
     *
     * @return $this
     */
    public function setSelector($selector)
    {
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \CBSi\Kubernetes\Model\V1PodTemplateSpec
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \CBSi\Kubernetes\Model\V1PodTemplateSpec $template An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets template_generation
     *
     * @return int
     */
    public function getTemplateGeneration()
    {
        return $this->container['template_generation'];
    }

    /**
     * Sets template_generation
     *
     * @param int $template_generation DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
     *
     * @return $this
     */
    public function setTemplateGeneration($template_generation)
    {
        $this->container['template_generation'] = $template_generation;

        return $this;
    }

    /**
     * Gets update_strategy
     *
     * @return \CBSi\Kubernetes\Model\V1beta1DaemonSetUpdateStrategy
     */
    public function getUpdateStrategy()
    {
        return $this->container['update_strategy'];
    }

    /**
     * Sets update_strategy
     *
     * @param \CBSi\Kubernetes\Model\V1beta1DaemonSetUpdateStrategy $update_strategy An update strategy to replace existing DaemonSet pods with new pods.
     *
     * @return $this
     */
    public function setUpdateStrategy($update_strategy)
    {
        $this->container['update_strategy'] = $update_strategy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



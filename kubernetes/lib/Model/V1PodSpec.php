<?php
/**
 * V1PodSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1PodSpec Class Doc Comment
 *
 * @category Class
 * @description PodSpec is a description of a pod.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1PodSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.PodSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_deadline_seconds' => 'int',
        'affinity' => '\CBSi\Kubernetes\Model\V1Affinity',
        'automount_service_account_token' => 'bool',
        'containers' => '\CBSi\Kubernetes\Model\V1Container[]',
        'dns_policy' => 'string',
        'host_aliases' => '\CBSi\Kubernetes\Model\V1HostAlias[]',
        'host_ipc' => 'bool',
        'host_network' => 'bool',
        'host_pid' => 'bool',
        'hostname' => 'string',
        'image_pull_secrets' => '\CBSi\Kubernetes\Model\V1LocalObjectReference[]',
        'init_containers' => '\CBSi\Kubernetes\Model\V1Container[]',
        'node_name' => 'string',
        'node_selector' => 'map[string,string]',
        'restart_policy' => 'string',
        'scheduler_name' => 'string',
        'security_context' => '\CBSi\Kubernetes\Model\V1PodSecurityContext',
        'service_account' => 'string',
        'service_account_name' => 'string',
        'subdomain' => 'string',
        'termination_grace_period_seconds' => 'int',
        'tolerations' => '\CBSi\Kubernetes\Model\V1Toleration[]',
        'volumes' => '\CBSi\Kubernetes\Model\V1Volume[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_deadline_seconds' => 'int64',
        'affinity' => null,
        'automount_service_account_token' => null,
        'containers' => null,
        'dns_policy' => null,
        'host_aliases' => null,
        'host_ipc' => null,
        'host_network' => null,
        'host_pid' => null,
        'hostname' => null,
        'image_pull_secrets' => null,
        'init_containers' => null,
        'node_name' => null,
        'node_selector' => null,
        'restart_policy' => null,
        'scheduler_name' => null,
        'security_context' => null,
        'service_account' => null,
        'service_account_name' => null,
        'subdomain' => null,
        'termination_grace_period_seconds' => 'int64',
        'tolerations' => null,
        'volumes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_deadline_seconds' => 'activeDeadlineSeconds',
        'affinity' => 'affinity',
        'automount_service_account_token' => 'automountServiceAccountToken',
        'containers' => 'containers',
        'dns_policy' => 'dnsPolicy',
        'host_aliases' => 'hostAliases',
        'host_ipc' => 'hostIPC',
        'host_network' => 'hostNetwork',
        'host_pid' => 'hostPID',
        'hostname' => 'hostname',
        'image_pull_secrets' => 'imagePullSecrets',
        'init_containers' => 'initContainers',
        'node_name' => 'nodeName',
        'node_selector' => 'nodeSelector',
        'restart_policy' => 'restartPolicy',
        'scheduler_name' => 'schedulerName',
        'security_context' => 'securityContext',
        'service_account' => 'serviceAccount',
        'service_account_name' => 'serviceAccountName',
        'subdomain' => 'subdomain',
        'termination_grace_period_seconds' => 'terminationGracePeriodSeconds',
        'tolerations' => 'tolerations',
        'volumes' => 'volumes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_deadline_seconds' => 'setActiveDeadlineSeconds',
        'affinity' => 'setAffinity',
        'automount_service_account_token' => 'setAutomountServiceAccountToken',
        'containers' => 'setContainers',
        'dns_policy' => 'setDnsPolicy',
        'host_aliases' => 'setHostAliases',
        'host_ipc' => 'setHostIpc',
        'host_network' => 'setHostNetwork',
        'host_pid' => 'setHostPid',
        'hostname' => 'setHostname',
        'image_pull_secrets' => 'setImagePullSecrets',
        'init_containers' => 'setInitContainers',
        'node_name' => 'setNodeName',
        'node_selector' => 'setNodeSelector',
        'restart_policy' => 'setRestartPolicy',
        'scheduler_name' => 'setSchedulerName',
        'security_context' => 'setSecurityContext',
        'service_account' => 'setServiceAccount',
        'service_account_name' => 'setServiceAccountName',
        'subdomain' => 'setSubdomain',
        'termination_grace_period_seconds' => 'setTerminationGracePeriodSeconds',
        'tolerations' => 'setTolerations',
        'volumes' => 'setVolumes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_deadline_seconds' => 'getActiveDeadlineSeconds',
        'affinity' => 'getAffinity',
        'automount_service_account_token' => 'getAutomountServiceAccountToken',
        'containers' => 'getContainers',
        'dns_policy' => 'getDnsPolicy',
        'host_aliases' => 'getHostAliases',
        'host_ipc' => 'getHostIpc',
        'host_network' => 'getHostNetwork',
        'host_pid' => 'getHostPid',
        'hostname' => 'getHostname',
        'image_pull_secrets' => 'getImagePullSecrets',
        'init_containers' => 'getInitContainers',
        'node_name' => 'getNodeName',
        'node_selector' => 'getNodeSelector',
        'restart_policy' => 'getRestartPolicy',
        'scheduler_name' => 'getSchedulerName',
        'security_context' => 'getSecurityContext',
        'service_account' => 'getServiceAccount',
        'service_account_name' => 'getServiceAccountName',
        'subdomain' => 'getSubdomain',
        'termination_grace_period_seconds' => 'getTerminationGracePeriodSeconds',
        'tolerations' => 'getTolerations',
        'volumes' => 'getVolumes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_deadline_seconds'] = isset($data['active_deadline_seconds']) ? $data['active_deadline_seconds'] : null;
        $this->container['affinity'] = isset($data['affinity']) ? $data['affinity'] : null;
        $this->container['automount_service_account_token'] = isset($data['automount_service_account_token']) ? $data['automount_service_account_token'] : null;
        $this->container['containers'] = isset($data['containers']) ? $data['containers'] : null;
        $this->container['dns_policy'] = isset($data['dns_policy']) ? $data['dns_policy'] : null;
        $this->container['host_aliases'] = isset($data['host_aliases']) ? $data['host_aliases'] : null;
        $this->container['host_ipc'] = isset($data['host_ipc']) ? $data['host_ipc'] : null;
        $this->container['host_network'] = isset($data['host_network']) ? $data['host_network'] : null;
        $this->container['host_pid'] = isset($data['host_pid']) ? $data['host_pid'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['image_pull_secrets'] = isset($data['image_pull_secrets']) ? $data['image_pull_secrets'] : null;
        $this->container['init_containers'] = isset($data['init_containers']) ? $data['init_containers'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['node_selector'] = isset($data['node_selector']) ? $data['node_selector'] : null;
        $this->container['restart_policy'] = isset($data['restart_policy']) ? $data['restart_policy'] : null;
        $this->container['scheduler_name'] = isset($data['scheduler_name']) ? $data['scheduler_name'] : null;
        $this->container['security_context'] = isset($data['security_context']) ? $data['security_context'] : null;
        $this->container['service_account'] = isset($data['service_account']) ? $data['service_account'] : null;
        $this->container['service_account_name'] = isset($data['service_account_name']) ? $data['service_account_name'] : null;
        $this->container['subdomain'] = isset($data['subdomain']) ? $data['subdomain'] : null;
        $this->container['termination_grace_period_seconds'] = isset($data['termination_grace_period_seconds']) ? $data['termination_grace_period_seconds'] : null;
        $this->container['tolerations'] = isset($data['tolerations']) ? $data['tolerations'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['containers'] === null) {
            $invalidProperties[] = "'containers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['containers'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets active_deadline_seconds
     *
     * @return int
     */
    public function getActiveDeadlineSeconds()
    {
        return $this->container['active_deadline_seconds'];
    }

    /**
     * Sets active_deadline_seconds
     *
     * @param int $active_deadline_seconds Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     *
     * @return $this
     */
    public function setActiveDeadlineSeconds($active_deadline_seconds)
    {
        $this->container['active_deadline_seconds'] = $active_deadline_seconds;

        return $this;
    }

    /**
     * Gets affinity
     *
     * @return \CBSi\Kubernetes\Model\V1Affinity
     */
    public function getAffinity()
    {
        return $this->container['affinity'];
    }

    /**
     * Sets affinity
     *
     * @param \CBSi\Kubernetes\Model\V1Affinity $affinity If specified, the pod's scheduling constraints
     *
     * @return $this
     */
    public function setAffinity($affinity)
    {
        $this->container['affinity'] = $affinity;

        return $this;
    }

    /**
     * Gets automount_service_account_token
     *
     * @return bool
     */
    public function getAutomountServiceAccountToken()
    {
        return $this->container['automount_service_account_token'];
    }

    /**
     * Sets automount_service_account_token
     *
     * @param bool $automount_service_account_token AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     *
     * @return $this
     */
    public function setAutomountServiceAccountToken($automount_service_account_token)
    {
        $this->container['automount_service_account_token'] = $automount_service_account_token;

        return $this;
    }

    /**
     * Gets containers
     *
     * @return \CBSi\Kubernetes\Model\V1Container[]
     */
    public function getContainers()
    {
        return $this->container['containers'];
    }

    /**
     * Sets containers
     *
     * @param \CBSi\Kubernetes\Model\V1Container[] $containers List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     *
     * @return $this
     */
    public function setContainers($containers)
    {
        $this->container['containers'] = $containers;

        return $this;
    }

    /**
     * Gets dns_policy
     *
     * @return string
     */
    public function getDnsPolicy()
    {
        return $this->container['dns_policy'];
    }

    /**
     * Sets dns_policy
     *
     * @param string $dns_policy Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     *
     * @return $this
     */
    public function setDnsPolicy($dns_policy)
    {
        $this->container['dns_policy'] = $dns_policy;

        return $this;
    }

    /**
     * Gets host_aliases
     *
     * @return \CBSi\Kubernetes\Model\V1HostAlias[]
     */
    public function getHostAliases()
    {
        return $this->container['host_aliases'];
    }

    /**
     * Sets host_aliases
     *
     * @param \CBSi\Kubernetes\Model\V1HostAlias[] $host_aliases HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
     *
     * @return $this
     */
    public function setHostAliases($host_aliases)
    {
        $this->container['host_aliases'] = $host_aliases;

        return $this;
    }

    /**
     * Gets host_ipc
     *
     * @return bool
     */
    public function getHostIpc()
    {
        return $this->container['host_ipc'];
    }

    /**
     * Sets host_ipc
     *
     * @param bool $host_ipc Use the host's ipc namespace. Optional: Default to false.
     *
     * @return $this
     */
    public function setHostIpc($host_ipc)
    {
        $this->container['host_ipc'] = $host_ipc;

        return $this;
    }

    /**
     * Gets host_network
     *
     * @return bool
     */
    public function getHostNetwork()
    {
        return $this->container['host_network'];
    }

    /**
     * Sets host_network
     *
     * @param bool $host_network Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     *
     * @return $this
     */
    public function setHostNetwork($host_network)
    {
        $this->container['host_network'] = $host_network;

        return $this;
    }

    /**
     * Gets host_pid
     *
     * @return bool
     */
    public function getHostPid()
    {
        return $this->container['host_pid'];
    }

    /**
     * Sets host_pid
     *
     * @param bool $host_pid Use the host's pid namespace. Optional: Default to false.
     *
     * @return $this
     */
    public function setHostPid($host_pid)
    {
        $this->container['host_pid'] = $host_pid;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets image_pull_secrets
     *
     * @return \CBSi\Kubernetes\Model\V1LocalObjectReference[]
     */
    public function getImagePullSecrets()
    {
        return $this->container['image_pull_secrets'];
    }

    /**
     * Sets image_pull_secrets
     *
     * @param \CBSi\Kubernetes\Model\V1LocalObjectReference[] $image_pull_secrets ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
     *
     * @return $this
     */
    public function setImagePullSecrets($image_pull_secrets)
    {
        $this->container['image_pull_secrets'] = $image_pull_secrets;

        return $this;
    }

    /**
     * Gets init_containers
     *
     * @return \CBSi\Kubernetes\Model\V1Container[]
     */
    public function getInitContainers()
    {
        return $this->container['init_containers'];
    }

    /**
     * Sets init_containers
     *
     * @param \CBSi\Kubernetes\Model\V1Container[] $init_containers List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     *
     * @return $this
     */
    public function setInitContainers($init_containers)
    {
        $this->container['init_containers'] = $init_containers;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets node_selector
     *
     * @return map[string,string]
     */
    public function getNodeSelector()
    {
        return $this->container['node_selector'];
    }

    /**
     * Sets node_selector
     *
     * @param map[string,string] $node_selector NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
     *
     * @return $this
     */
    public function setNodeSelector($node_selector)
    {
        $this->container['node_selector'] = $node_selector;

        return $this;
    }

    /**
     * Gets restart_policy
     *
     * @return string
     */
    public function getRestartPolicy()
    {
        return $this->container['restart_policy'];
    }

    /**
     * Sets restart_policy
     *
     * @param string $restart_policy Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
     *
     * @return $this
     */
    public function setRestartPolicy($restart_policy)
    {
        $this->container['restart_policy'] = $restart_policy;

        return $this;
    }

    /**
     * Gets scheduler_name
     *
     * @return string
     */
    public function getSchedulerName()
    {
        return $this->container['scheduler_name'];
    }

    /**
     * Sets scheduler_name
     *
     * @param string $scheduler_name If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     *
     * @return $this
     */
    public function setSchedulerName($scheduler_name)
    {
        $this->container['scheduler_name'] = $scheduler_name;

        return $this;
    }

    /**
     * Gets security_context
     *
     * @return \CBSi\Kubernetes\Model\V1PodSecurityContext
     */
    public function getSecurityContext()
    {
        return $this->container['security_context'];
    }

    /**
     * Sets security_context
     *
     * @param \CBSi\Kubernetes\Model\V1PodSecurityContext $security_context SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
     *
     * @return $this
     */
    public function setSecurityContext($security_context)
    {
        $this->container['security_context'] = $security_context;

        return $this;
    }

    /**
     * Gets service_account
     *
     * @return string
     */
    public function getServiceAccount()
    {
        return $this->container['service_account'];
    }

    /**
     * Sets service_account
     *
     * @param string $service_account DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     *
     * @return $this
     */
    public function setServiceAccount($service_account)
    {
        $this->container['service_account'] = $service_account;

        return $this;
    }

    /**
     * Gets service_account_name
     *
     * @return string
     */
    public function getServiceAccountName()
    {
        return $this->container['service_account_name'];
    }

    /**
     * Sets service_account_name
     *
     * @param string $service_account_name ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     *
     * @return $this
     */
    public function setServiceAccountName($service_account_name)
    {
        $this->container['service_account_name'] = $service_account_name;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string $subdomain If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.
     *
     * @return $this
     */
    public function setSubdomain($subdomain)
    {
        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets termination_grace_period_seconds
     *
     * @return int
     */
    public function getTerminationGracePeriodSeconds()
    {
        return $this->container['termination_grace_period_seconds'];
    }

    /**
     * Sets termination_grace_period_seconds
     *
     * @param int $termination_grace_period_seconds Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     *
     * @return $this
     */
    public function setTerminationGracePeriodSeconds($termination_grace_period_seconds)
    {
        $this->container['termination_grace_period_seconds'] = $termination_grace_period_seconds;

        return $this;
    }

    /**
     * Gets tolerations
     *
     * @return \CBSi\Kubernetes\Model\V1Toleration[]
     */
    public function getTolerations()
    {
        return $this->container['tolerations'];
    }

    /**
     * Sets tolerations
     *
     * @param \CBSi\Kubernetes\Model\V1Toleration[] $tolerations If specified, the pod's tolerations.
     *
     * @return $this
     */
    public function setTolerations($tolerations)
    {
        $this->container['tolerations'] = $tolerations;

        return $this;
    }

    /**
     * Gets volumes
     *
     * @return \CBSi\Kubernetes\Model\V1Volume[]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     *
     * @param \CBSi\Kubernetes\Model\V1Volume[] $volumes List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     *
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * V1beta1APIServiceSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1beta1APIServiceSpec Class Doc Comment
 *
 * @category Class
 * @description APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1beta1APIServiceSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1beta1.APIServiceSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ca_bundle' => 'string',
        'group' => 'string',
        'group_priority_minimum' => 'int',
        'insecure_skip_tls_verify' => 'bool',
        'service' => '\CBSi\Kubernetes\Model\V1beta1ServiceReference',
        'version' => 'string',
        'version_priority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ca_bundle' => 'byte',
        'group' => null,
        'group_priority_minimum' => 'int32',
        'insecure_skip_tls_verify' => null,
        'service' => null,
        'version' => null,
        'version_priority' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ca_bundle' => 'caBundle',
        'group' => 'group',
        'group_priority_minimum' => 'groupPriorityMinimum',
        'insecure_skip_tls_verify' => 'insecureSkipTLSVerify',
        'service' => 'service',
        'version' => 'version',
        'version_priority' => 'versionPriority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ca_bundle' => 'setCaBundle',
        'group' => 'setGroup',
        'group_priority_minimum' => 'setGroupPriorityMinimum',
        'insecure_skip_tls_verify' => 'setInsecureSkipTlsVerify',
        'service' => 'setService',
        'version' => 'setVersion',
        'version_priority' => 'setVersionPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ca_bundle' => 'getCaBundle',
        'group' => 'getGroup',
        'group_priority_minimum' => 'getGroupPriorityMinimum',
        'insecure_skip_tls_verify' => 'getInsecureSkipTlsVerify',
        'service' => 'getService',
        'version' => 'getVersion',
        'version_priority' => 'getVersionPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ca_bundle'] = isset($data['ca_bundle']) ? $data['ca_bundle'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['group_priority_minimum'] = isset($data['group_priority_minimum']) ? $data['group_priority_minimum'] : null;
        $this->container['insecure_skip_tls_verify'] = isset($data['insecure_skip_tls_verify']) ? $data['insecure_skip_tls_verify'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['version_priority'] = isset($data['version_priority']) ? $data['version_priority'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ca_bundle'] === null) {
            $invalidProperties[] = "'ca_bundle' can't be null";
        }
        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['ca_bundle'])) {
            $invalidProperties[] = "invalid value for 'ca_bundle', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if ($this->container['group_priority_minimum'] === null) {
            $invalidProperties[] = "'group_priority_minimum' can't be null";
        }
        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if ($this->container['version_priority'] === null) {
            $invalidProperties[] = "'version_priority' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ca_bundle'] === null) {
            return false;
        }
        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['ca_bundle'])) {
            return false;
        }
        if ($this->container['group_priority_minimum'] === null) {
            return false;
        }
        if ($this->container['service'] === null) {
            return false;
        }
        if ($this->container['version_priority'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ca_bundle
     *
     * @return string
     */
    public function getCaBundle()
    {
        return $this->container['ca_bundle'];
    }

    /**
     * Sets ca_bundle
     *
     * @param string $ca_bundle CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.
     *
     * @return $this
     */
    public function setCaBundle($ca_bundle)
    {

        if ((!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $ca_bundle))) {
            throw new \InvalidArgumentException("invalid value for $ca_bundle when calling V1beta1APIServiceSpec., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['ca_bundle'] = $ca_bundle;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group Group is the API group name this server hosts
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets group_priority_minimum
     *
     * @return int
     */
    public function getGroupPriorityMinimum()
    {
        return $this->container['group_priority_minimum'];
    }

    /**
     * Sets group_priority_minimum
     *
     * @param int $group_priority_minimum GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
     *
     * @return $this
     */
    public function setGroupPriorityMinimum($group_priority_minimum)
    {
        $this->container['group_priority_minimum'] = $group_priority_minimum;

        return $this;
    }

    /**
     * Gets insecure_skip_tls_verify
     *
     * @return bool
     */
    public function getInsecureSkipTlsVerify()
    {
        return $this->container['insecure_skip_tls_verify'];
    }

    /**
     * Sets insecure_skip_tls_verify
     *
     * @param bool $insecure_skip_tls_verify InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
     *
     * @return $this
     */
    public function setInsecureSkipTlsVerify($insecure_skip_tls_verify)
    {
        $this->container['insecure_skip_tls_verify'] = $insecure_skip_tls_verify;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \CBSi\Kubernetes\Model\V1beta1ServiceReference
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \CBSi\Kubernetes\Model\V1beta1ServiceReference $service Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Version is the API version this server hosts.  For example, \"v1\"
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets version_priority
     *
     * @return int
     */
    public function getVersionPriority()
    {
        return $this->container['version_priority'];
    }

    /**
     * Sets version_priority
     *
     * @param int $version_priority VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it's inside of a group, the number can be small, probably in the 10s.
     *
     * @return $this
     */
    public function setVersionPriority($version_priority)
    {
        $this->container['version_priority'] = $version_priority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * V1beta1ReplicaSetStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1beta1ReplicaSetStatus Class Doc Comment
 *
 * @category Class
 * @description ReplicaSetStatus represents the current status of a ReplicaSet.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1beta1ReplicaSetStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1beta1.ReplicaSetStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'available_replicas' => 'int',
        'conditions' => '\CBSi\Kubernetes\Model\V1beta1ReplicaSetCondition[]',
        'fully_labeled_replicas' => 'int',
        'observed_generation' => 'int',
        'ready_replicas' => 'int',
        'replicas' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'available_replicas' => 'int32',
        'conditions' => null,
        'fully_labeled_replicas' => 'int32',
        'observed_generation' => 'int64',
        'ready_replicas' => 'int32',
        'replicas' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available_replicas' => 'availableReplicas',
        'conditions' => 'conditions',
        'fully_labeled_replicas' => 'fullyLabeledReplicas',
        'observed_generation' => 'observedGeneration',
        'ready_replicas' => 'readyReplicas',
        'replicas' => 'replicas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available_replicas' => 'setAvailableReplicas',
        'conditions' => 'setConditions',
        'fully_labeled_replicas' => 'setFullyLabeledReplicas',
        'observed_generation' => 'setObservedGeneration',
        'ready_replicas' => 'setReadyReplicas',
        'replicas' => 'setReplicas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available_replicas' => 'getAvailableReplicas',
        'conditions' => 'getConditions',
        'fully_labeled_replicas' => 'getFullyLabeledReplicas',
        'observed_generation' => 'getObservedGeneration',
        'ready_replicas' => 'getReadyReplicas',
        'replicas' => 'getReplicas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available_replicas'] = isset($data['available_replicas']) ? $data['available_replicas'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['fully_labeled_replicas'] = isset($data['fully_labeled_replicas']) ? $data['fully_labeled_replicas'] : null;
        $this->container['observed_generation'] = isset($data['observed_generation']) ? $data['observed_generation'] : null;
        $this->container['ready_replicas'] = isset($data['ready_replicas']) ? $data['ready_replicas'] : null;
        $this->container['replicas'] = isset($data['replicas']) ? $data['replicas'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['replicas'] === null) {
            $invalidProperties[] = "'replicas' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['replicas'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets available_replicas
     *
     * @return int
     */
    public function getAvailableReplicas()
    {
        return $this->container['available_replicas'];
    }

    /**
     * Sets available_replicas
     *
     * @param int $available_replicas The number of available replicas (ready for at least minReadySeconds) for this replica set.
     *
     * @return $this
     */
    public function setAvailableReplicas($available_replicas)
    {
        $this->container['available_replicas'] = $available_replicas;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \CBSi\Kubernetes\Model\V1beta1ReplicaSetCondition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \CBSi\Kubernetes\Model\V1beta1ReplicaSetCondition[] $conditions Represents the latest available observations of a replica set's current state.
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets fully_labeled_replicas
     *
     * @return int
     */
    public function getFullyLabeledReplicas()
    {
        return $this->container['fully_labeled_replicas'];
    }

    /**
     * Sets fully_labeled_replicas
     *
     * @param int $fully_labeled_replicas The number of pods that have labels matching the labels of the pod template of the replicaset.
     *
     * @return $this
     */
    public function setFullyLabeledReplicas($fully_labeled_replicas)
    {
        $this->container['fully_labeled_replicas'] = $fully_labeled_replicas;

        return $this;
    }

    /**
     * Gets observed_generation
     *
     * @return int
     */
    public function getObservedGeneration()
    {
        return $this->container['observed_generation'];
    }

    /**
     * Sets observed_generation
     *
     * @param int $observed_generation ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
     *
     * @return $this
     */
    public function setObservedGeneration($observed_generation)
    {
        $this->container['observed_generation'] = $observed_generation;

        return $this;
    }

    /**
     * Gets ready_replicas
     *
     * @return int
     */
    public function getReadyReplicas()
    {
        return $this->container['ready_replicas'];
    }

    /**
     * Sets ready_replicas
     *
     * @param int $ready_replicas The number of ready replicas for this replica set.
     *
     * @return $this
     */
    public function setReadyReplicas($ready_replicas)
    {
        $this->container['ready_replicas'] = $ready_replicas;

        return $this;
    }

    /**
     * Gets replicas
     *
     * @return int
     */
    public function getReplicas()
    {
        return $this->container['replicas'];
    }

    /**
     * Sets replicas
     *
     * @param int $replicas Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
     *
     * @return $this
     */
    public function setReplicas($replicas)
    {
        $this->container['replicas'] = $replicas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



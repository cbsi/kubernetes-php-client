<?php
/**
 * V1ScaleIOVolumeSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1ScaleIOVolumeSource Class Doc Comment
 *
 * @category Class
 * @description ScaleIOVolumeSource represents a persistent ScaleIO volume
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1ScaleIOVolumeSource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.ScaleIOVolumeSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fs_type' => 'string',
        'gateway' => 'string',
        'protection_domain' => 'string',
        'read_only' => 'bool',
        'secret_ref' => '\CBSi\Kubernetes\Model\V1LocalObjectReference',
        'ssl_enabled' => 'bool',
        'storage_mode' => 'string',
        'storage_pool' => 'string',
        'system' => 'string',
        'volume_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fs_type' => null,
        'gateway' => null,
        'protection_domain' => null,
        'read_only' => null,
        'secret_ref' => null,
        'ssl_enabled' => null,
        'storage_mode' => null,
        'storage_pool' => null,
        'system' => null,
        'volume_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fs_type' => 'fsType',
        'gateway' => 'gateway',
        'protection_domain' => 'protectionDomain',
        'read_only' => 'readOnly',
        'secret_ref' => 'secretRef',
        'ssl_enabled' => 'sslEnabled',
        'storage_mode' => 'storageMode',
        'storage_pool' => 'storagePool',
        'system' => 'system',
        'volume_name' => 'volumeName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fs_type' => 'setFsType',
        'gateway' => 'setGateway',
        'protection_domain' => 'setProtectionDomain',
        'read_only' => 'setReadOnly',
        'secret_ref' => 'setSecretRef',
        'ssl_enabled' => 'setSslEnabled',
        'storage_mode' => 'setStorageMode',
        'storage_pool' => 'setStoragePool',
        'system' => 'setSystem',
        'volume_name' => 'setVolumeName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fs_type' => 'getFsType',
        'gateway' => 'getGateway',
        'protection_domain' => 'getProtectionDomain',
        'read_only' => 'getReadOnly',
        'secret_ref' => 'getSecretRef',
        'ssl_enabled' => 'getSslEnabled',
        'storage_mode' => 'getStorageMode',
        'storage_pool' => 'getStoragePool',
        'system' => 'getSystem',
        'volume_name' => 'getVolumeName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fs_type'] = isset($data['fs_type']) ? $data['fs_type'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['protection_domain'] = isset($data['protection_domain']) ? $data['protection_domain'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['secret_ref'] = isset($data['secret_ref']) ? $data['secret_ref'] : null;
        $this->container['ssl_enabled'] = isset($data['ssl_enabled']) ? $data['ssl_enabled'] : null;
        $this->container['storage_mode'] = isset($data['storage_mode']) ? $data['storage_mode'] : null;
        $this->container['storage_pool'] = isset($data['storage_pool']) ? $data['storage_pool'] : null;
        $this->container['system'] = isset($data['system']) ? $data['system'] : null;
        $this->container['volume_name'] = isset($data['volume_name']) ? $data['volume_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['gateway'] === null) {
            $invalidProperties[] = "'gateway' can't be null";
        }
        if ($this->container['secret_ref'] === null) {
            $invalidProperties[] = "'secret_ref' can't be null";
        }
        if ($this->container['system'] === null) {
            $invalidProperties[] = "'system' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['gateway'] === null) {
            return false;
        }
        if ($this->container['secret_ref'] === null) {
            return false;
        }
        if ($this->container['system'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets fs_type
     *
     * @return string
     */
    public function getFsType()
    {
        return $this->container['fs_type'];
    }

    /**
     * Sets fs_type
     *
     * @param string $fs_type Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     *
     * @return $this
     */
    public function setFsType($fs_type)
    {
        $this->container['fs_type'] = $fs_type;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string $gateway The host address of the ScaleIO API Gateway.
     *
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets protection_domain
     *
     * @return string
     */
    public function getProtectionDomain()
    {
        return $this->container['protection_domain'];
    }

    /**
     * Sets protection_domain
     *
     * @param string $protection_domain The name of the Protection Domain for the configured storage (defaults to \"default\").
     *
     * @return $this
     */
    public function setProtectionDomain($protection_domain)
    {
        $this->container['protection_domain'] = $protection_domain;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets secret_ref
     *
     * @return \CBSi\Kubernetes\Model\V1LocalObjectReference
     */
    public function getSecretRef()
    {
        return $this->container['secret_ref'];
    }

    /**
     * Sets secret_ref
     *
     * @param \CBSi\Kubernetes\Model\V1LocalObjectReference $secret_ref SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
     *
     * @return $this
     */
    public function setSecretRef($secret_ref)
    {
        $this->container['secret_ref'] = $secret_ref;

        return $this;
    }

    /**
     * Gets ssl_enabled
     *
     * @return bool
     */
    public function getSslEnabled()
    {
        return $this->container['ssl_enabled'];
    }

    /**
     * Sets ssl_enabled
     *
     * @param bool $ssl_enabled Flag to enable/disable SSL communication with Gateway, default false
     *
     * @return $this
     */
    public function setSslEnabled($ssl_enabled)
    {
        $this->container['ssl_enabled'] = $ssl_enabled;

        return $this;
    }

    /**
     * Gets storage_mode
     *
     * @return string
     */
    public function getStorageMode()
    {
        return $this->container['storage_mode'];
    }

    /**
     * Sets storage_mode
     *
     * @param string $storage_mode Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\").
     *
     * @return $this
     */
    public function setStorageMode($storage_mode)
    {
        $this->container['storage_mode'] = $storage_mode;

        return $this;
    }

    /**
     * Gets storage_pool
     *
     * @return string
     */
    public function getStoragePool()
    {
        return $this->container['storage_pool'];
    }

    /**
     * Sets storage_pool
     *
     * @param string $storage_pool The Storage Pool associated with the protection domain (defaults to \"default\").
     *
     * @return $this
     */
    public function setStoragePool($storage_pool)
    {
        $this->container['storage_pool'] = $storage_pool;

        return $this;
    }

    /**
     * Gets system
     *
     * @return string
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param string $system The name of the storage system as configured in ScaleIO.
     *
     * @return $this
     */
    public function setSystem($system)
    {
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets volume_name
     *
     * @return string
     */
    public function getVolumeName()
    {
        return $this->container['volume_name'];
    }

    /**
     * Sets volume_name
     *
     * @param string $volume_name The name of a volume already created in the ScaleIO system that is associated with this volume source.
     *
     * @return $this
     */
    public function setVolumeName($volume_name)
    {
        $this->container['volume_name'] = $volume_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



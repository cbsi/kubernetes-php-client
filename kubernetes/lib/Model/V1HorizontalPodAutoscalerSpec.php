<?php
/**
 * V1HorizontalPodAutoscalerSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1HorizontalPodAutoscalerSpec Class Doc Comment
 *
 * @category Class
 * @description specification of a horizontal pod autoscaler.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1HorizontalPodAutoscalerSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.HorizontalPodAutoscalerSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_replicas' => 'int',
        'min_replicas' => 'int',
        'scale_target_ref' => '\CBSi\Kubernetes\Model\V1CrossVersionObjectReference',
        'target_cpu_utilization_percentage' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_replicas' => 'int32',
        'min_replicas' => 'int32',
        'scale_target_ref' => null,
        'target_cpu_utilization_percentage' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_replicas' => 'maxReplicas',
        'min_replicas' => 'minReplicas',
        'scale_target_ref' => 'scaleTargetRef',
        'target_cpu_utilization_percentage' => 'targetCPUUtilizationPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_replicas' => 'setMaxReplicas',
        'min_replicas' => 'setMinReplicas',
        'scale_target_ref' => 'setScaleTargetRef',
        'target_cpu_utilization_percentage' => 'setTargetCpuUtilizationPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_replicas' => 'getMaxReplicas',
        'min_replicas' => 'getMinReplicas',
        'scale_target_ref' => 'getScaleTargetRef',
        'target_cpu_utilization_percentage' => 'getTargetCpuUtilizationPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_replicas'] = isset($data['max_replicas']) ? $data['max_replicas'] : null;
        $this->container['min_replicas'] = isset($data['min_replicas']) ? $data['min_replicas'] : null;
        $this->container['scale_target_ref'] = isset($data['scale_target_ref']) ? $data['scale_target_ref'] : null;
        $this->container['target_cpu_utilization_percentage'] = isset($data['target_cpu_utilization_percentage']) ? $data['target_cpu_utilization_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['max_replicas'] === null) {
            $invalidProperties[] = "'max_replicas' can't be null";
        }
        if ($this->container['scale_target_ref'] === null) {
            $invalidProperties[] = "'scale_target_ref' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['max_replicas'] === null) {
            return false;
        }
        if ($this->container['scale_target_ref'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets max_replicas
     *
     * @return int
     */
    public function getMaxReplicas()
    {
        return $this->container['max_replicas'];
    }

    /**
     * Sets max_replicas
     *
     * @param int $max_replicas upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
     *
     * @return $this
     */
    public function setMaxReplicas($max_replicas)
    {
        $this->container['max_replicas'] = $max_replicas;

        return $this;
    }

    /**
     * Gets min_replicas
     *
     * @return int
     */
    public function getMinReplicas()
    {
        return $this->container['min_replicas'];
    }

    /**
     * Sets min_replicas
     *
     * @param int $min_replicas lower limit for the number of pods that can be set by the autoscaler, default 1.
     *
     * @return $this
     */
    public function setMinReplicas($min_replicas)
    {
        $this->container['min_replicas'] = $min_replicas;

        return $this;
    }

    /**
     * Gets scale_target_ref
     *
     * @return \CBSi\Kubernetes\Model\V1CrossVersionObjectReference
     */
    public function getScaleTargetRef()
    {
        return $this->container['scale_target_ref'];
    }

    /**
     * Sets scale_target_ref
     *
     * @param \CBSi\Kubernetes\Model\V1CrossVersionObjectReference $scale_target_ref reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
     *
     * @return $this
     */
    public function setScaleTargetRef($scale_target_ref)
    {
        $this->container['scale_target_ref'] = $scale_target_ref;

        return $this;
    }

    /**
     * Gets target_cpu_utilization_percentage
     *
     * @return int
     */
    public function getTargetCpuUtilizationPercentage()
    {
        return $this->container['target_cpu_utilization_percentage'];
    }

    /**
     * Sets target_cpu_utilization_percentage
     *
     * @param int $target_cpu_utilization_percentage target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
     *
     * @return $this
     */
    public function setTargetCpuUtilizationPercentage($target_cpu_utilization_percentage)
    {
        $this->container['target_cpu_utilization_percentage'] = $target_cpu_utilization_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * V1PodSecurityContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1PodSecurityContext Class Doc Comment
 *
 * @category Class
 * @description PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1PodSecurityContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.PodSecurityContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fs_group' => 'int',
        'run_as_non_root' => 'bool',
        'run_as_user' => 'int',
        'se_linux_options' => '\CBSi\Kubernetes\Model\V1SELinuxOptions',
        'supplemental_groups' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fs_group' => 'int64',
        'run_as_non_root' => null,
        'run_as_user' => 'int64',
        'se_linux_options' => null,
        'supplemental_groups' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fs_group' => 'fsGroup',
        'run_as_non_root' => 'runAsNonRoot',
        'run_as_user' => 'runAsUser',
        'se_linux_options' => 'seLinuxOptions',
        'supplemental_groups' => 'supplementalGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fs_group' => 'setFsGroup',
        'run_as_non_root' => 'setRunAsNonRoot',
        'run_as_user' => 'setRunAsUser',
        'se_linux_options' => 'setSeLinuxOptions',
        'supplemental_groups' => 'setSupplementalGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fs_group' => 'getFsGroup',
        'run_as_non_root' => 'getRunAsNonRoot',
        'run_as_user' => 'getRunAsUser',
        'se_linux_options' => 'getSeLinuxOptions',
        'supplemental_groups' => 'getSupplementalGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fs_group'] = isset($data['fs_group']) ? $data['fs_group'] : null;
        $this->container['run_as_non_root'] = isset($data['run_as_non_root']) ? $data['run_as_non_root'] : null;
        $this->container['run_as_user'] = isset($data['run_as_user']) ? $data['run_as_user'] : null;
        $this->container['se_linux_options'] = isset($data['se_linux_options']) ? $data['se_linux_options'] : null;
        $this->container['supplemental_groups'] = isset($data['supplemental_groups']) ? $data['supplemental_groups'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets fs_group
     *
     * @return int
     */
    public function getFsGroup()
    {
        return $this->container['fs_group'];
    }

    /**
     * Sets fs_group
     *
     * @param int $fs_group A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume.
     *
     * @return $this
     */
    public function setFsGroup($fs_group)
    {
        $this->container['fs_group'] = $fs_group;

        return $this;
    }

    /**
     * Gets run_as_non_root
     *
     * @return bool
     */
    public function getRunAsNonRoot()
    {
        return $this->container['run_as_non_root'];
    }

    /**
     * Sets run_as_non_root
     *
     * @param bool $run_as_non_root Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     *
     * @return $this
     */
    public function setRunAsNonRoot($run_as_non_root)
    {
        $this->container['run_as_non_root'] = $run_as_non_root;

        return $this;
    }

    /**
     * Gets run_as_user
     *
     * @return int
     */
    public function getRunAsUser()
    {
        return $this->container['run_as_user'];
    }

    /**
     * Sets run_as_user
     *
     * @param int $run_as_user The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     *
     * @return $this
     */
    public function setRunAsUser($run_as_user)
    {
        $this->container['run_as_user'] = $run_as_user;

        return $this;
    }

    /**
     * Gets se_linux_options
     *
     * @return \CBSi\Kubernetes\Model\V1SELinuxOptions
     */
    public function getSeLinuxOptions()
    {
        return $this->container['se_linux_options'];
    }

    /**
     * Sets se_linux_options
     *
     * @param \CBSi\Kubernetes\Model\V1SELinuxOptions $se_linux_options The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     *
     * @return $this
     */
    public function setSeLinuxOptions($se_linux_options)
    {
        $this->container['se_linux_options'] = $se_linux_options;

        return $this;
    }

    /**
     * Gets supplemental_groups
     *
     * @return int[]
     */
    public function getSupplementalGroups()
    {
        return $this->container['supplemental_groups'];
    }

    /**
     * Sets supplemental_groups
     *
     * @param int[] $supplemental_groups A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
     *
     * @return $this
     */
    public function setSupplementalGroups($supplemental_groups)
    {
        $this->container['supplemental_groups'] = $supplemental_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



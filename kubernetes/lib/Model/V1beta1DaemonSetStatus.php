<?php
/**
 * V1beta1DaemonSetStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V1beta1DaemonSetStatus Class Doc Comment
 *
 * @category Class
 * @description DaemonSetStatus represents the current status of a daemon set.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1beta1DaemonSetStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1beta1.DaemonSetStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'collision_count' => 'int',
        'current_number_scheduled' => 'int',
        'desired_number_scheduled' => 'int',
        'number_available' => 'int',
        'number_misscheduled' => 'int',
        'number_ready' => 'int',
        'number_unavailable' => 'int',
        'observed_generation' => 'int',
        'updated_number_scheduled' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'collision_count' => 'int64',
        'current_number_scheduled' => 'int32',
        'desired_number_scheduled' => 'int32',
        'number_available' => 'int32',
        'number_misscheduled' => 'int32',
        'number_ready' => 'int32',
        'number_unavailable' => 'int32',
        'observed_generation' => 'int64',
        'updated_number_scheduled' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collision_count' => 'collisionCount',
        'current_number_scheduled' => 'currentNumberScheduled',
        'desired_number_scheduled' => 'desiredNumberScheduled',
        'number_available' => 'numberAvailable',
        'number_misscheduled' => 'numberMisscheduled',
        'number_ready' => 'numberReady',
        'number_unavailable' => 'numberUnavailable',
        'observed_generation' => 'observedGeneration',
        'updated_number_scheduled' => 'updatedNumberScheduled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collision_count' => 'setCollisionCount',
        'current_number_scheduled' => 'setCurrentNumberScheduled',
        'desired_number_scheduled' => 'setDesiredNumberScheduled',
        'number_available' => 'setNumberAvailable',
        'number_misscheduled' => 'setNumberMisscheduled',
        'number_ready' => 'setNumberReady',
        'number_unavailable' => 'setNumberUnavailable',
        'observed_generation' => 'setObservedGeneration',
        'updated_number_scheduled' => 'setUpdatedNumberScheduled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collision_count' => 'getCollisionCount',
        'current_number_scheduled' => 'getCurrentNumberScheduled',
        'desired_number_scheduled' => 'getDesiredNumberScheduled',
        'number_available' => 'getNumberAvailable',
        'number_misscheduled' => 'getNumberMisscheduled',
        'number_ready' => 'getNumberReady',
        'number_unavailable' => 'getNumberUnavailable',
        'observed_generation' => 'getObservedGeneration',
        'updated_number_scheduled' => 'getUpdatedNumberScheduled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collision_count'] = isset($data['collision_count']) ? $data['collision_count'] : null;
        $this->container['current_number_scheduled'] = isset($data['current_number_scheduled']) ? $data['current_number_scheduled'] : null;
        $this->container['desired_number_scheduled'] = isset($data['desired_number_scheduled']) ? $data['desired_number_scheduled'] : null;
        $this->container['number_available'] = isset($data['number_available']) ? $data['number_available'] : null;
        $this->container['number_misscheduled'] = isset($data['number_misscheduled']) ? $data['number_misscheduled'] : null;
        $this->container['number_ready'] = isset($data['number_ready']) ? $data['number_ready'] : null;
        $this->container['number_unavailable'] = isset($data['number_unavailable']) ? $data['number_unavailable'] : null;
        $this->container['observed_generation'] = isset($data['observed_generation']) ? $data['observed_generation'] : null;
        $this->container['updated_number_scheduled'] = isset($data['updated_number_scheduled']) ? $data['updated_number_scheduled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['current_number_scheduled'] === null) {
            $invalidProperties[] = "'current_number_scheduled' can't be null";
        }
        if ($this->container['desired_number_scheduled'] === null) {
            $invalidProperties[] = "'desired_number_scheduled' can't be null";
        }
        if ($this->container['number_misscheduled'] === null) {
            $invalidProperties[] = "'number_misscheduled' can't be null";
        }
        if ($this->container['number_ready'] === null) {
            $invalidProperties[] = "'number_ready' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['current_number_scheduled'] === null) {
            return false;
        }
        if ($this->container['desired_number_scheduled'] === null) {
            return false;
        }
        if ($this->container['number_misscheduled'] === null) {
            return false;
        }
        if ($this->container['number_ready'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets collision_count
     *
     * @return int
     */
    public function getCollisionCount()
    {
        return $this->container['collision_count'];
    }

    /**
     * Sets collision_count
     *
     * @param int $collision_count Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
     *
     * @return $this
     */
    public function setCollisionCount($collision_count)
    {
        $this->container['collision_count'] = $collision_count;

        return $this;
    }

    /**
     * Gets current_number_scheduled
     *
     * @return int
     */
    public function getCurrentNumberScheduled()
    {
        return $this->container['current_number_scheduled'];
    }

    /**
     * Sets current_number_scheduled
     *
     * @param int $current_number_scheduled The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     *
     * @return $this
     */
    public function setCurrentNumberScheduled($current_number_scheduled)
    {
        $this->container['current_number_scheduled'] = $current_number_scheduled;

        return $this;
    }

    /**
     * Gets desired_number_scheduled
     *
     * @return int
     */
    public function getDesiredNumberScheduled()
    {
        return $this->container['desired_number_scheduled'];
    }

    /**
     * Sets desired_number_scheduled
     *
     * @param int $desired_number_scheduled The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     *
     * @return $this
     */
    public function setDesiredNumberScheduled($desired_number_scheduled)
    {
        $this->container['desired_number_scheduled'] = $desired_number_scheduled;

        return $this;
    }

    /**
     * Gets number_available
     *
     * @return int
     */
    public function getNumberAvailable()
    {
        return $this->container['number_available'];
    }

    /**
     * Sets number_available
     *
     * @param int $number_available The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
     *
     * @return $this
     */
    public function setNumberAvailable($number_available)
    {
        $this->container['number_available'] = $number_available;

        return $this;
    }

    /**
     * Gets number_misscheduled
     *
     * @return int
     */
    public function getNumberMisscheduled()
    {
        return $this->container['number_misscheduled'];
    }

    /**
     * Sets number_misscheduled
     *
     * @param int $number_misscheduled The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     *
     * @return $this
     */
    public function setNumberMisscheduled($number_misscheduled)
    {
        $this->container['number_misscheduled'] = $number_misscheduled;

        return $this;
    }

    /**
     * Gets number_ready
     *
     * @return int
     */
    public function getNumberReady()
    {
        return $this->container['number_ready'];
    }

    /**
     * Sets number_ready
     *
     * @param int $number_ready The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
     *
     * @return $this
     */
    public function setNumberReady($number_ready)
    {
        $this->container['number_ready'] = $number_ready;

        return $this;
    }

    /**
     * Gets number_unavailable
     *
     * @return int
     */
    public function getNumberUnavailable()
    {
        return $this->container['number_unavailable'];
    }

    /**
     * Sets number_unavailable
     *
     * @param int $number_unavailable The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
     *
     * @return $this
     */
    public function setNumberUnavailable($number_unavailable)
    {
        $this->container['number_unavailable'] = $number_unavailable;

        return $this;
    }

    /**
     * Gets observed_generation
     *
     * @return int
     */
    public function getObservedGeneration()
    {
        return $this->container['observed_generation'];
    }

    /**
     * Sets observed_generation
     *
     * @param int $observed_generation The most recent generation observed by the daemon set controller.
     *
     * @return $this
     */
    public function setObservedGeneration($observed_generation)
    {
        $this->container['observed_generation'] = $observed_generation;

        return $this;
    }

    /**
     * Gets updated_number_scheduled
     *
     * @return int
     */
    public function getUpdatedNumberScheduled()
    {
        return $this->container['updated_number_scheduled'];
    }

    /**
     * Sets updated_number_scheduled
     *
     * @param int $updated_number_scheduled The total number of nodes that are running updated daemon pod
     *
     * @return $this
     */
    public function setUpdatedNumberScheduled($updated_number_scheduled)
    {
        $this->container['updated_number_scheduled'] = $updated_number_scheduled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * V2alpha1CronJobSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * V2alpha1CronJobSpec Class Doc Comment
 *
 * @category Class
 * @description CronJobSpec describes how the job execution will look like and when it will actually run.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2alpha1CronJobSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2alpha1.CronJobSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'concurrency_policy' => 'string',
        'failed_jobs_history_limit' => 'int',
        'job_template' => '\CBSi\Kubernetes\Model\V2alpha1JobTemplateSpec',
        'schedule' => 'string',
        'starting_deadline_seconds' => 'int',
        'successful_jobs_history_limit' => 'int',
        'suspend' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'concurrency_policy' => null,
        'failed_jobs_history_limit' => 'int32',
        'job_template' => null,
        'schedule' => null,
        'starting_deadline_seconds' => 'int64',
        'successful_jobs_history_limit' => 'int32',
        'suspend' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'concurrency_policy' => 'concurrencyPolicy',
        'failed_jobs_history_limit' => 'failedJobsHistoryLimit',
        'job_template' => 'jobTemplate',
        'schedule' => 'schedule',
        'starting_deadline_seconds' => 'startingDeadlineSeconds',
        'successful_jobs_history_limit' => 'successfulJobsHistoryLimit',
        'suspend' => 'suspend'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'concurrency_policy' => 'setConcurrencyPolicy',
        'failed_jobs_history_limit' => 'setFailedJobsHistoryLimit',
        'job_template' => 'setJobTemplate',
        'schedule' => 'setSchedule',
        'starting_deadline_seconds' => 'setStartingDeadlineSeconds',
        'successful_jobs_history_limit' => 'setSuccessfulJobsHistoryLimit',
        'suspend' => 'setSuspend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'concurrency_policy' => 'getConcurrencyPolicy',
        'failed_jobs_history_limit' => 'getFailedJobsHistoryLimit',
        'job_template' => 'getJobTemplate',
        'schedule' => 'getSchedule',
        'starting_deadline_seconds' => 'getStartingDeadlineSeconds',
        'successful_jobs_history_limit' => 'getSuccessfulJobsHistoryLimit',
        'suspend' => 'getSuspend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['concurrency_policy'] = isset($data['concurrency_policy']) ? $data['concurrency_policy'] : null;
        $this->container['failed_jobs_history_limit'] = isset($data['failed_jobs_history_limit']) ? $data['failed_jobs_history_limit'] : null;
        $this->container['job_template'] = isset($data['job_template']) ? $data['job_template'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['starting_deadline_seconds'] = isset($data['starting_deadline_seconds']) ? $data['starting_deadline_seconds'] : null;
        $this->container['successful_jobs_history_limit'] = isset($data['successful_jobs_history_limit']) ? $data['successful_jobs_history_limit'] : null;
        $this->container['suspend'] = isset($data['suspend']) ? $data['suspend'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['job_template'] === null) {
            $invalidProperties[] = "'job_template' can't be null";
        }
        if ($this->container['schedule'] === null) {
            $invalidProperties[] = "'schedule' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['job_template'] === null) {
            return false;
        }
        if ($this->container['schedule'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets concurrency_policy
     *
     * @return string
     */
    public function getConcurrencyPolicy()
    {
        return $this->container['concurrency_policy'];
    }

    /**
     * Sets concurrency_policy
     *
     * @param string $concurrency_policy Specifies how to treat concurrent executions of a Job. Defaults to Allow.
     *
     * @return $this
     */
    public function setConcurrencyPolicy($concurrency_policy)
    {
        $this->container['concurrency_policy'] = $concurrency_policy;

        return $this;
    }

    /**
     * Gets failed_jobs_history_limit
     *
     * @return int
     */
    public function getFailedJobsHistoryLimit()
    {
        return $this->container['failed_jobs_history_limit'];
    }

    /**
     * Sets failed_jobs_history_limit
     *
     * @param int $failed_jobs_history_limit The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
     *
     * @return $this
     */
    public function setFailedJobsHistoryLimit($failed_jobs_history_limit)
    {
        $this->container['failed_jobs_history_limit'] = $failed_jobs_history_limit;

        return $this;
    }

    /**
     * Gets job_template
     *
     * @return \CBSi\Kubernetes\Model\V2alpha1JobTemplateSpec
     */
    public function getJobTemplate()
    {
        return $this->container['job_template'];
    }

    /**
     * Sets job_template
     *
     * @param \CBSi\Kubernetes\Model\V2alpha1JobTemplateSpec $job_template Specifies the job that will be created when executing a CronJob.
     *
     * @return $this
     */
    public function setJobTemplate($job_template)
    {
        $this->container['job_template'] = $job_template;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string $schedule The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets starting_deadline_seconds
     *
     * @return int
     */
    public function getStartingDeadlineSeconds()
    {
        return $this->container['starting_deadline_seconds'];
    }

    /**
     * Sets starting_deadline_seconds
     *
     * @param int $starting_deadline_seconds Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
     *
     * @return $this
     */
    public function setStartingDeadlineSeconds($starting_deadline_seconds)
    {
        $this->container['starting_deadline_seconds'] = $starting_deadline_seconds;

        return $this;
    }

    /**
     * Gets successful_jobs_history_limit
     *
     * @return int
     */
    public function getSuccessfulJobsHistoryLimit()
    {
        return $this->container['successful_jobs_history_limit'];
    }

    /**
     * Sets successful_jobs_history_limit
     *
     * @param int $successful_jobs_history_limit The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
     *
     * @return $this
     */
    public function setSuccessfulJobsHistoryLimit($successful_jobs_history_limit)
    {
        $this->container['successful_jobs_history_limit'] = $successful_jobs_history_limit;

        return $this;
    }

    /**
     * Gets suspend
     *
     * @return bool
     */
    public function getSuspend()
    {
        return $this->container['suspend'];
    }

    /**
     * Sets suspend
     *
     * @param bool $suspend This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
     *
     * @return $this
     */
    public function setSuspend($suspend)
    {
        $this->container['suspend'] = $suspend;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



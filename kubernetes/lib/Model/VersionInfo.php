<?php
/**
 * VersionInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CBSi\Kubernetes\Model;

use \ArrayAccess;
use \CBSi\Kubernetes\ObjectSerializer;

/**
 * VersionInfo Class Doc Comment
 *
 * @category Class
 * @description Info contains versioning information. how we&#39;ll want to distribute that information.
 * @package  CBSi\Kubernetes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VersionInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'version.Info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'build_date' => 'string',
        'compiler' => 'string',
        'git_commit' => 'string',
        'git_tree_state' => 'string',
        'git_version' => 'string',
        'go_version' => 'string',
        'major' => 'string',
        'minor' => 'string',
        'platform' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'build_date' => null,
        'compiler' => null,
        'git_commit' => null,
        'git_tree_state' => null,
        'git_version' => null,
        'go_version' => null,
        'major' => null,
        'minor' => null,
        'platform' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'build_date' => 'buildDate',
        'compiler' => 'compiler',
        'git_commit' => 'gitCommit',
        'git_tree_state' => 'gitTreeState',
        'git_version' => 'gitVersion',
        'go_version' => 'goVersion',
        'major' => 'major',
        'minor' => 'minor',
        'platform' => 'platform'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'build_date' => 'setBuildDate',
        'compiler' => 'setCompiler',
        'git_commit' => 'setGitCommit',
        'git_tree_state' => 'setGitTreeState',
        'git_version' => 'setGitVersion',
        'go_version' => 'setGoVersion',
        'major' => 'setMajor',
        'minor' => 'setMinor',
        'platform' => 'setPlatform'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'build_date' => 'getBuildDate',
        'compiler' => 'getCompiler',
        'git_commit' => 'getGitCommit',
        'git_tree_state' => 'getGitTreeState',
        'git_version' => 'getGitVersion',
        'go_version' => 'getGoVersion',
        'major' => 'getMajor',
        'minor' => 'getMinor',
        'platform' => 'getPlatform'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['build_date'] = isset($data['build_date']) ? $data['build_date'] : null;
        $this->container['compiler'] = isset($data['compiler']) ? $data['compiler'] : null;
        $this->container['git_commit'] = isset($data['git_commit']) ? $data['git_commit'] : null;
        $this->container['git_tree_state'] = isset($data['git_tree_state']) ? $data['git_tree_state'] : null;
        $this->container['git_version'] = isset($data['git_version']) ? $data['git_version'] : null;
        $this->container['go_version'] = isset($data['go_version']) ? $data['go_version'] : null;
        $this->container['major'] = isset($data['major']) ? $data['major'] : null;
        $this->container['minor'] = isset($data['minor']) ? $data['minor'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['build_date'] === null) {
            $invalidProperties[] = "'build_date' can't be null";
        }
        if ($this->container['compiler'] === null) {
            $invalidProperties[] = "'compiler' can't be null";
        }
        if ($this->container['git_commit'] === null) {
            $invalidProperties[] = "'git_commit' can't be null";
        }
        if ($this->container['git_tree_state'] === null) {
            $invalidProperties[] = "'git_tree_state' can't be null";
        }
        if ($this->container['git_version'] === null) {
            $invalidProperties[] = "'git_version' can't be null";
        }
        if ($this->container['go_version'] === null) {
            $invalidProperties[] = "'go_version' can't be null";
        }
        if ($this->container['major'] === null) {
            $invalidProperties[] = "'major' can't be null";
        }
        if ($this->container['minor'] === null) {
            $invalidProperties[] = "'minor' can't be null";
        }
        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['build_date'] === null) {
            return false;
        }
        if ($this->container['compiler'] === null) {
            return false;
        }
        if ($this->container['git_commit'] === null) {
            return false;
        }
        if ($this->container['git_tree_state'] === null) {
            return false;
        }
        if ($this->container['git_version'] === null) {
            return false;
        }
        if ($this->container['go_version'] === null) {
            return false;
        }
        if ($this->container['major'] === null) {
            return false;
        }
        if ($this->container['minor'] === null) {
            return false;
        }
        if ($this->container['platform'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets build_date
     *
     * @return string
     */
    public function getBuildDate()
    {
        return $this->container['build_date'];
    }

    /**
     * Sets build_date
     *
     * @param string $build_date build_date
     *
     * @return $this
     */
    public function setBuildDate($build_date)
    {
        $this->container['build_date'] = $build_date;

        return $this;
    }

    /**
     * Gets compiler
     *
     * @return string
     */
    public function getCompiler()
    {
        return $this->container['compiler'];
    }

    /**
     * Sets compiler
     *
     * @param string $compiler compiler
     *
     * @return $this
     */
    public function setCompiler($compiler)
    {
        $this->container['compiler'] = $compiler;

        return $this;
    }

    /**
     * Gets git_commit
     *
     * @return string
     */
    public function getGitCommit()
    {
        return $this->container['git_commit'];
    }

    /**
     * Sets git_commit
     *
     * @param string $git_commit git_commit
     *
     * @return $this
     */
    public function setGitCommit($git_commit)
    {
        $this->container['git_commit'] = $git_commit;

        return $this;
    }

    /**
     * Gets git_tree_state
     *
     * @return string
     */
    public function getGitTreeState()
    {
        return $this->container['git_tree_state'];
    }

    /**
     * Sets git_tree_state
     *
     * @param string $git_tree_state git_tree_state
     *
     * @return $this
     */
    public function setGitTreeState($git_tree_state)
    {
        $this->container['git_tree_state'] = $git_tree_state;

        return $this;
    }

    /**
     * Gets git_version
     *
     * @return string
     */
    public function getGitVersion()
    {
        return $this->container['git_version'];
    }

    /**
     * Sets git_version
     *
     * @param string $git_version git_version
     *
     * @return $this
     */
    public function setGitVersion($git_version)
    {
        $this->container['git_version'] = $git_version;

        return $this;
    }

    /**
     * Gets go_version
     *
     * @return string
     */
    public function getGoVersion()
    {
        return $this->container['go_version'];
    }

    /**
     * Sets go_version
     *
     * @param string $go_version go_version
     *
     * @return $this
     */
    public function setGoVersion($go_version)
    {
        $this->container['go_version'] = $go_version;

        return $this;
    }

    /**
     * Gets major
     *
     * @return string
     */
    public function getMajor()
    {
        return $this->container['major'];
    }

    /**
     * Sets major
     *
     * @param string $major major
     *
     * @return $this
     */
    public function setMajor($major)
    {
        $this->container['major'] = $major;

        return $this;
    }

    /**
     * Gets minor
     *
     * @return string
     */
    public function getMinor()
    {
        return $this->container['minor'];
    }

    /**
     * Sets minor
     *
     * @param string $minor minor
     *
     * @return $this
     */
    public function setMinor($minor)
    {
        $this->container['minor'] = $minor;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


